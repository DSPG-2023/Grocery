[{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://dspg-2023.github.io/Grocery/articles/Est-Expenses.html","id":"estimating-expenses","dir":"Articles","previous_headings":"","what":"Estimating Expenses","title":"Estimating Expenses","text":"One essential element calculation store profitability estimation various expenses potential store owner might deal open. Categories expenses include: much total estimated revenue spent cost goods (inventory)? Covers expenses compensation company officers, employee wages common operating expenses grocery stores Covers annual loss depreciation various assets required operate grocery store Annual interest loan payments (loan taken ) Annual cost rent leased building Another important factor consider secondary sources income. sources may include: Income interest Income collected interest-bearing assets. Income include special services outside revenue sold goods alone, special grocery delivery services project, decided give freedom user determine individual percentage total estimated revenue spent kind expense, also giving user default value guide . default value taken Bizminer, business data reporting platform supplies us industry average percentages category expense. Users able : Switch multiple ownership scenarios 3 different scenarios: User owns building. User rents building. User establishes another holding company owns building, rents company. Input expense percentages interactive sliders Sliders contain “Bizminer Default” tick mark Enter custom list assets calculate cost depreciation Default assets listed along multiple boxes custom assets Users enter custom dollar values assets Enter custom loan rent information Users can calculate annual interest loan Users can calculate annual rent given rate monthly rent Ultimately, estimated expenses subtracted total estimated revenue estimated secondary income added. give user estimate pre-tax profit given store location hope help coming decision.","code":""},{"path":"https://dspg-2023.github.io/Grocery/articles/Est-Market-Size.html","id":"dspggrocery-current-operations","dir":"Articles","previous_headings":"","what":"DSPGGrocery Current Operations","title":"Estimating Market Size","text":"Estimating market size three main components. Metro population, population, rural population. Metro population number people live town proposed grocery store . Determining simple parsing name town using tidycensus get population. Next populations towns around building store. complicated, using buffer around city figure names towns, can use loop tidycensus. Rural population people don’t live city. can figure roughly figuring people live county, subtracting people live cities county. multiply percentage area county covered market area. constricted counties, gives rough estimate. calculations estimating area covered trade area finding distance nearest store quadrant (NE, NW, SE, SW). use distance radius quarter circle figure much reach store . bad way determining market region thing takes account distance closest store, also ignores radius store . elegant solution Voronoi polygons Reilly’s law Retail Gravitation.","code":""},{"path":[]},{"path":"https://dspg-2023.github.io/Grocery/articles/Est-Market-Size.html","id":"voronoi","dir":"Articles","previous_headings":"Alternates","what":"Voronoi","title":"Estimating Market Size","text":"Voronoi Polygon polygon defined points region closer parent node nodes. show us accurate estimate market area take store account people live nearer store store likely choose shop one instead.","code":""},{"path":"https://dspg-2023.github.io/Grocery/articles/Est-Market-Size.html","id":"reillys-law","dir":"Articles","previous_headings":"Alternates","what":"Reilly’s Law","title":"Estimating Market Size","text":"Reilly’s law economic principle states people drawn areas higher population smaller populations. excellent way estimate market area, somewhat complicated. Maps usually edited hand account geographic barriers rivers, various limitations populations two cities relatively similar.","code":""},{"path":"https://dspg-2023.github.io/Grocery/articles/Est-Market-Size.html","id":"huffs-law","dir":"Articles","previous_headings":"Alternates","what":"Huff’s Law","title":"Estimating Market Size","text":"Huff’s law probabilistic model estimating consumer attraction. states attractiveness store something called distance decay determine likelihood someone visiting store. Distance decay idea people move farther farther away, likelihood exponentially decreases visit store. real world mean even though store might 10 times attractive another, 10 times farther away, likely travel .","code":""},{"path":[]},{"path":"https://dspg-2023.github.io/Grocery/articles/Est-Market-Size.html","id":"shaping-the-data","dir":"Articles","previous_headings":"Code","what":"Shaping the data","title":"Estimating Market Size","text":"needed several helper methods shape data way want . Address Parser simple function take address string turn list. also made function takes address, parses , converts dataframe columns cities county populations. used lot throughout functions. program able pull Google Places API find nearby stores, gives us latitude longitude stores, distance, direction. function takes data frame API call figures direction stores , returns nearest store quadrant. original data frame gives us lat longs, measure position distance, first convert another coordinate system called UTM, Universal Transverse Mercator coordinates. measure distance, can easily compare points find distance , since based far East North point , can determine direction origin point new point .","code":"Address_Parser <- function(address) {   split_addr <- as.list(strsplit(address, \", \")[[1]])   names(split_addr) <- c(\"street\", \"city\", \"state\")   return(split_addr) } Pop_Binder <- function(address) {    #Doing this because I want to use this variable in Metro_Pop   splt_addr <- Address_Parser(address)     geocoded_address <- geocode(location = address, output = \"all\")   geo_county <- geocoded_address[[\"results\"]][[1]][[\"address_components\"]][[4]][[\"long_name\"]]   geo_county <- gsub( \" County\", \"\", as.character(geo_county))    city_df <- data.frame(state = splt_addr[5], county = geo_county, city = splt_addr[2])     #city_df <- data.frame(state = \"Iowa\", county = \"Sac\")   city_in_county <- get_cities_in_county(city_df[1,])   county_cities_list <- stringr::str_split(city_in_county$city_list, \", \")    #This gives us the name of city and the population. We need to separate city   #and state name, and then remove the city and CDP from the NAME so we can join   #with the county_cities_list    place_pop <- get_decennial(year = 2020,                              geography = \"place\",                              variables = \"DP1_0001C\",                              sumfile = \"dp\",                              state = city_in_county[1])   place_pop$NAME <- gsub( \" city\", \"\", as.character(place_pop$NAME))   place_pop$NAME <- gsub( \" CDP\", \"\", as.character(place_pop$NAME))   place_pop <- separate(data = place_pop, col = NAME, into = c(\"City\", \"State\"), sep = \";\")         #Convert County cities list to a data frame in the correct shape and name   #to join with place_pop   county_cities_df <- data.frame(unlist(county_cities_list))   lookup <- c(City = \"unlist.county_cities_list.\")   county_cities_df <- rename(county_cities_df, all_of(lookup))    bound_df <- merge(county_cities_df, place_pop, by='City')   cbind(bound_df, County = geo_county)  } Distance_Comparator <- function(df_places_grocery) {    #Creates a new dataframe with the Lat, Long, and Name columns   #This step is completely unnecessary, but the original DF   #had awful column names and I didn't want to have to look at all   #the other columns   api_stores <- data.frame( Name = df_places_grocery$name,                             lat = df_places_grocery$lat,                             lng = df_places_grocery$lng)    #Add Northing and Easting Columns   UTM_geo <- lonlat2utm(longitude = df_geocode$lng,                              latitude = df_geocode$lat,                              zone = UTM_Zoner(abs(api_stores$lng[1])))   df_geocode <- cbind(df_geocode, UTM_geo)    UTM_df <- lonlat2utm(longitude = api_stores$lng,                             latitude = api_stores$lat,                             zone = UTM_Zoner(abs(api_stores$lng[1])))   api_stores <- cbind(api_stores, UTM_df)    # Save variables for testing.   #this is not a test I need this   origin_test <- c(df_geocode$easting, df_geocode$northing)   end_test <- matrix(c(api_stores$easting, api_stores$northing), ncol = 2)     #### FUNCTION TEST - Call Function   #this is not a test function, this is integral to the program functionality   #this saves a global variable named df_new with the distance appended   Distance_Euclidean(api_stores, origin = origin_test, end = end_test)      # Create Dataframes with stores in each quadrant    #Creates a new dataframe with all of the stores in each quadrant   northeast_stores <- df_new %>% filter(as.numeric(df_new$northing)                                         > as.numeric(df_geocode$northing[1])                                         & as.numeric(df_new$easting)                                         > as.numeric(df_geocode$easting[1]))    northwest_stores <- df_new %>% filter(as.numeric(df_new$northing)                                         > as.numeric(df_geocode$northing[1])                                         & as.numeric(df_new$easting)                                         < as.numeric(df_geocode$easting[1]))     southeast_stores <- df_new %>% filter(as.numeric(df_new$northing)                                         < as.numeric(df_geocode$northing[1])                                         & as.numeric(df_new$easting)                                         > as.numeric(df_geocode$easting[1]))    southwest_stores <- df_new %>% filter(as.numeric(df_new$northing)                                         < as.numeric(df_geocode$northing[1])                                         & as.numeric(df_new$easting)                                         < as.numeric(df_geocode$easting[1]))     # Find distance to nearest in each quadrant    #I guess in a conversion somewhere the value is being squared. Square rooting   #Makes this correct.   #Using %/%1 to remove decimal point   northeast_dist <<- sqrt(min(northeast_stores$distance_vector))%/%1   northwest_dist <<-sqrt(min(northwest_stores$distance_vector))%/%1   southeast_dist <<- sqrt(min(southeast_stores$distance_vector))%/%1   southwest_dist <<- sqrt(min(southwest_stores$distance_vector))%/%1     #df_new but with only closest stores named df_circle_buffer   NE_min <- northeast_stores %>% filter(northeast_stores$distance_vector                                         ==min(northeast_stores$distance_vector))   NW_min <- northwest_stores %>% filter(northwest_stores$distance_vector                                         ==min(northwest_stores$distance_vector))   SE_min <- southeast_stores %>% filter(southeast_stores$distance_vector                                         ==min(southeast_stores$distance_vector))   SW_min <- southwest_stores %>% filter(southwest_stores$distance_vector                                         ==min(southwest_stores$distance_vector))   return(df_circle_buffer <- rbind(NE_min,NW_min,SE_min,SW_min))   #add NESW labels   }"},{"path":"https://dspg-2023.github.io/Grocery/articles/Est-Market-Size.html","id":"metro-population","dir":"Articles","previous_headings":"Code","what":"Metro population","title":"Estimating Market Size","text":"Metro population super simple function. takes address parameter, parses address, filters just cities name. #TODO add Cities Pop Rural Pop","code":"Metro_Pop <- function(address) {   #We should be saving address as a global variable so we don't have to pass it   #as a parameter in most of my functions   splt_addr <- Address_Parser(address)   df %>% filter(City == splt_addr[\"city\"])   return(df$value) } library(DSPGGrocery) #>  #> Attaching package: 'DSPGGrocery' #> The following object is masked _by_ '.GlobalEnv': #>  #>     Address_Parser"},{"path":"https://dspg-2023.github.io/Grocery/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"package maintainer. Maintainer.","code":""},{"path":"https://dspg-2023.github.io/Grocery/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ww (2023). DSPGGrocery: Package (Title Case). R package version 0.1.0.","code":"@Manual{,   title = {DSPGGrocery: What the Package Does (Title Case)},   author = {Who wrote it},   year = {2023},   note = {R package version 0.1.0}, }"},{"path":[]},{"path":[]},{"path":"https://dspg-2023.github.io/Grocery/reference/Address_Parser.html","id":null,"dir":"Reference","previous_headings":"","what":"Parses an Address — Address_Parser","title":"Parses an Address — Address_Parser","text":"takes address string separated commas returns address parsed list form.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Address_Parser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parses an Address — Address_Parser","text":"","code":"Address_Parser(address)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Address_Parser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parses an Address — Address_Parser","text":"address address character parsed.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Address_Parser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parses an Address — Address_Parser","text":"split_addr data frame columns street, city, state abbreviation, county, state.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Address_Parser.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parses an Address — Address_Parser","text":"Alex Cory","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Adj_Capita_Grocery_Spend.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase — Adj_Capita_Grocery_Spend","title":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase — Adj_Capita_Grocery_Spend","text":"Calculates Average per Capita Spending Adjusted Estimated Price Increase","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Adj_Capita_Grocery_Spend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase — Adj_Capita_Grocery_Spend","text":"","code":"Adj_Capita_Grocery_Spend(   est_per_price_increase = 7,   grocery_sales = 8.11541e+11,   population = 334233854 )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Adj_Capita_Grocery_Spend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase — Adj_Capita_Grocery_Spend","text":"est_per_price_increase Estimated increase price grocery cumulative percent default taken 7 2023 grocery_sales Total US grocery sales annually. Default value 811541000000. population Total US population. Default value 334233854.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Adj_Capita_Grocery_Spend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase — Adj_Capita_Grocery_Spend","text":"Outputs average per capita grocery spend adjusting expected price increase.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Adj_Capita_Grocery_Spend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase — Adj_Capita_Grocery_Spend","text":"function taken Estimating_Revenue.xlsx calculated Step two. function calls Avg_Capita_Grocery_Spending().","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Adj_Capita_Grocery_Spend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase — Adj_Capita_Grocery_Spend","text":"","code":"Adj_Capita_Grocery_Spend() #> [1] 2598.028"},{"path":"https://dspg-2023.github.io/Grocery/reference/Annual_Rent.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of Annual Rent — Annual_Rent","title":"Calculation of Annual Rent — Annual_Rent","text":"Calculation Annual Rent","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Annual_Rent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of Annual Rent — Annual_Rent","text":"","code":"Annual_Rent(Monthly_Rent)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Annual_Rent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of Annual Rent — Annual_Rent","text":"Monthly_Rent Monthly rent lease","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Annual_Rent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of Annual Rent — Annual_Rent","text":"Outputs Annual Rent (dollars)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Annual_Rent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculation of Annual Rent — Annual_Rent","text":"function taken \"Estimating_Expenses.xlsx\" sheet calculated Step Four","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Avg_Capita_Grocery_Spending.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Average Grocery Spending per Capita. — Avg_Capita_Grocery_Spending","title":"Calculates Average Grocery Spending per Capita. — Avg_Capita_Grocery_Spending","text":"Calculates Average Grocery Spending per Capita.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Avg_Capita_Grocery_Spending.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Average Grocery Spending per Capita. — Avg_Capita_Grocery_Spending","text":"","code":"Avg_Capita_Grocery_Spending(   grocery_sales = 8.11541e+11,   population = 334233854 )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Avg_Capita_Grocery_Spending.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Average Grocery Spending per Capita. — Avg_Capita_Grocery_Spending","text":"grocery_sales Total US grocery sales annually. Default value 811541000000. population Total US population. Default value 334233854.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Avg_Capita_Grocery_Spending.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Average Grocery Spending per Capita. — Avg_Capita_Grocery_Spending","text":"Outputs average grocery spending per capita.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Avg_Capita_Grocery_Spending.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates Average Grocery Spending per Capita. — Avg_Capita_Grocery_Spending","text":"function taken Estimating_Revenue.xlsx calculated Step One.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Avg_Capita_Grocery_Spending.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates Average Grocery Spending per Capita. — Avg_Capita_Grocery_Spending","text":"","code":"Avg_Capita_Grocery_Spending(grocery_sales = 811541000000, population = 334233854) #> [1] 2428.063"},{"path":"https://dspg-2023.github.io/Grocery/reference/City_Populations.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation for Population of Cities in Quarter Circle. — City_Populations","title":"Calculation for Population of Cities in Quarter Circle. — City_Populations","text":"Calculation Population Cities Quarter Circle.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/City_Populations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation for Population of Cities in Quarter Circle. — City_Populations","text":"","code":"City_Populations(list_in)"},{"path":"https://dspg-2023.github.io/Grocery/reference/City_Populations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation for Population of Cities in Quarter Circle. — City_Populations","text":"list_in user defined list population towns","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/City_Populations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation for Population of Cities in Quarter Circle. — City_Populations","text":"outputs sum town populations","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/City_Populations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation for Population of Cities in Quarter Circle. — City_Populations","text":"","code":"City_Populations(list(77)) #> [1] 77"},{"path":"https://dspg-2023.github.io/Grocery/reference/Cost_of_Goods_Sold.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of the Cost of Goods Sold — Cost_of_Goods_Sold","title":"Calculation of the Cost of Goods Sold — Cost_of_Goods_Sold","text":"Calculation Cost Goods Sold","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Cost_of_Goods_Sold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of the Cost of Goods Sold — Cost_of_Goods_Sold","text":"","code":"Cost_of_Goods_Sold(Total_Estimated_Revenue, Gross_Margin_Percentage = 0.2446)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Cost_of_Goods_Sold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of the Cost of Goods Sold — Cost_of_Goods_Sold","text":"Total_Estimated_Revenue Output total estimated revenue calculation Gross_Margin_Percentage Percentage revenue gross margin (default Bizminer)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Cost_of_Goods_Sold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of the Cost of Goods Sold — Cost_of_Goods_Sold","text":"Outputs cost goods sold (dollars)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Cost_of_Goods_Sold.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculation of the Cost of Goods Sold — Cost_of_Goods_Sold","text":"Calls Gross_Margin() function provide gross margin (dollars) subtracted revenue calculate cost goods. function taken Estimating_Expense.xlxs (Step 6)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Cost_of_Goods_Sold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation of the Cost of Goods Sold — Cost_of_Goods_Sold","text":"","code":"# Cost_of_Goods_Sold(Total_Estimated_Revenue = 2000000, Gross_Margin_Percentage = .2446)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_1.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of Depreciation (for Building Ownership) — Depreciation_1","title":"Calculation of Depreciation (for Building Ownership) — Depreciation_1","text":"Calculation Depreciation (Building Ownership)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of Depreciation (for Building Ownership) — Depreciation_1","text":"","code":"Depreciation_1(   Building_Remodeling,   Parking_Lot_Improvements,   Shelving_Check_Out_Counters,   Computer_Equipment_POS,   Vehicles,   Display_Cases,   Refrigeration,   Freezers,   Meat_Cutting_Equipment,   Miscellaneous_Assets_1,   Miscellaneous_Assets_1_Use_Life,   Miscellaneous_Assets_2,   Miscellaneous_Assets_2_Use_Life,   Miscellaneous_Assets_3,   Miscellaneous_Assets_3_Use_Life )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of Depreciation (for Building Ownership) — Depreciation_1","text":"Building_Remodeling Cost  Building/Remodeling Parking_Lot_Improvements Depreciation Parking Lot Improvements Shelving_Check_Out_Counters Depreciation Shelving/Check Counters Computer_Equipment_POS Cost Computer System/POS Vehicles Cost Vehicles Display_Cases Cost Display cases Refrigeration Cost Refrigeration Freezers Cost Freezers Meat_Cutting_Equipment Cost Meat-cutting Equipment Miscellaneous_Assets_1 (Optional) Cost Miscellaneous Asset (1) Miscellaneous_Assets_1_Use_Life (Optional) Use Life Miscellaneous Asset (1) Miscellaneous_Assets_2 (Optional) Cost Miscellaneous Asset (2) Miscellaneous_Assets_2_Use_Life (Optional) Use Life Miscellaneous Asset (2) Miscellaneous_Assets_3 (Optional) Cost Miscellaneous Asset (3) Miscellaneous_Assets_3_Use_Life (Optional) Use life Miscellaneous Asset (3)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of Depreciation (for Building Ownership) — Depreciation_1","text":"Outputs total estimated loss depreciation property owners","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculation of Depreciation (for Building Ownership) — Depreciation_1","text":"function taken \"Estimating Expense\" excel sheet (step two)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation of Depreciation (for Building Ownership) — Depreciation_1","text":"","code":"Depreciation_1(   Building_Remodeling = 900000,   Parking_Lot_Improvements = 50000,   Shelving_Check_Out_Counters = 60000,   Computer_Equipment_POS = 15000,   Vehicles = 12000,   Display_Cases = 15000,   Refrigeration = 20000,   Freezers = 20000,   Meat_Cutting_Equipment = 10000,   Miscellaneous_Assets_1 = 10000,   Miscellaneous_Assets_1_Use_Life = 10,   Miscellaneous_Assets_2 = 10000,   Miscellaneous_Assets_2_Use_Life = 10,   Miscellaneous_Assets_3 = 10000,   Miscellaneous_Assets_3_Use_Life = 10) #> [1] 43310.26"},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_2.html","id":null,"dir":"Reference","previous_headings":"","what":"Depreciation Calculation — Depreciation_2","title":"Depreciation Calculation — Depreciation_2","text":"Depreciation Calculation","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Depreciation Calculation — Depreciation_2","text":"","code":"Depreciation_2(   Leasehold_Improvements,   Leasehold_Improvements_Use_Life,   Shelving_Check_Out_Counters,   Computer_Equipment_POS,   Vehicles,   Display_Cases,   Refrigeration,   Freezers,   Meat_Cutting_Equipment,   Miscellaneous_Assets_1,   Miscellaneous_Assets_1_Use_Life,   Miscellaneous_Assets_2,   Miscellaneous_Assets_2_Use_Life,   Miscellaneous_Assets_3,   Miscellaneous_Assets_3_Use_Life )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Depreciation Calculation — Depreciation_2","text":"Leasehold_Improvements Cost Leasehold Improvements Leasehold_Improvements_Use_Life Use life Leasehold Improvements Shelving_Check_Out_Counters Depreciation Shelving/Check Counters Computer_Equipment_POS Cost Computer System/POS Vehicles Cost Vehicles Display_Cases Cost Display cases Refrigeration Cost Refrigeration Freezers Cost Freezers Meat_Cutting_Equipment Cost Meat-cutting Equipment Miscellaneous_Assets_1 Optional parameter. Cost Miscellaneous Asset 1 Miscellaneous_Assets_1_Use_Life Optional parameter. Use Life Miscellaneous Asset 1 Miscellaneous_Assets_2 Optional parameter. Cost Miscellaneous Asset 2 Miscellaneous_Assets_2_Use_Life Optional parameter. Use Life Miscellaneous Asset 2 Miscellaneous_Assets_3 Optional parameter. Cost Miscellaneous Asset 3 Miscellaneous_Assets_3_Use_Life Optional parameter. Use life Miscellaneous Asset 3","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Depreciation Calculation — Depreciation_2","text":"Outputs total estimated loss depreciation property owners","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Depreciation Calculation — Depreciation_2","text":"function taken \"Estimating Expense\" excel sheet step two","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Depreciation Calculation — Depreciation_2","text":"","code":"Depreciation_2(Leasehold_Improvements = 900000,                Leasehold_Improvements_Use_Life = 10,                Shelving_Check_Out_Counters = 60000,                Computer_Equipment_POS = 15000,                Vehicles = 12000,                Display_Cases = 15000,                Refrigeration = 20000,                Freezers = 20000,                Meat_Cutting_Equipment = 10000,                Miscellaneous_Assets_1 = 10000,                Miscellaneous_Assets_1_Use_Life = 10,                Miscellaneous_Assets_2 = 10000,                Miscellaneous_Assets_2_Use_Life = 10,                Miscellaneous_Assets_3 = 10000,                Miscellaneous_Assets_3_Use_Life = 10) #> [1] 916900"},{"path":"https://dspg-2023.github.io/Grocery/reference/Employee_Wages.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of Employee Wages — Employee_Wages","title":"Calculation of Employee Wages — Employee_Wages","text":"Calculation Employee Wages","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Employee_Wages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of Employee Wages — Employee_Wages","text":"","code":"Employee_Wages(Total_Estimated_Revenue, Percentage = 0.0942)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Employee_Wages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of Employee Wages — Employee_Wages","text":"Total_Estimated_Revenue Output total estimated revenue calculation sheet Percentage Percentage revenue spent employee wages (default taken Bizminer)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Employee_Wages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of Employee Wages — Employee_Wages","text":"Outputs dollars spent employee wages (based provided percentage)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Employee_Wages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculation of Employee Wages — Employee_Wages","text":"function taken \"Estimating_Expenses.xlsx\" sheet calculated Step Six.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Employee_Wages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation of Employee Wages — Employee_Wages","text":"","code":"Employee_Wages(Total_Estimated_Revenue = 2000000, Percentage = .0942) #> [1] 188400"},{"path":"https://dspg-2023.github.io/Grocery/reference/Gross_Margin.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of Gross Margin — Gross_Margin","title":"Calculation of Gross Margin — Gross_Margin","text":"Calculation Gross Margin","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Gross_Margin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of Gross Margin — Gross_Margin","text":"","code":"Gross_Margin(Total_Estimated_Revenue, Percentage = 0.2446)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Gross_Margin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of Gross Margin — Gross_Margin","text":"Total_Estimated_Revenue Output total estimated revenue calculation Percentage Percentage Revenue Gross Margin (Revenue - Cost Goods)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Gross_Margin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of Gross Margin — Gross_Margin","text":"Outputs Gross Margin (dollars) depending percentage provided (default Bizminer)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Gross_Margin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculation of Gross Margin — Gross_Margin","text":"function taken \"Estimating Expense\" excel sheet (step six)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Gross_Margin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation of Gross Margin — Gross_Margin","text":"","code":"# Gross_Margin(Total_Estimated_Revenue = 2000000, Percentage = .2446)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Expense.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of First-Year Interest on a Loan — Interest_Expense","title":"Calculation of First-Year Interest on a Loan — Interest_Expense","text":"Calculation First-Year Interest Loan","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Expense.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of First-Year Interest on a Loan — Interest_Expense","text":"","code":"Interest_Expense(Loan_Amount, Interest_Rate)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Expense.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of First-Year Interest on a Loan — Interest_Expense","text":"Loan_Amount Total dollar amount loan Interest_Rate Interest rate (decimal form) loan","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Expense.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of First-Year Interest on a Loan — Interest_Expense","text":"Outputs first-year loan interest (dollars)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Expense.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculation of First-Year Interest on a Loan — Interest_Expense","text":"function taken \"Estimating_Expenses.xlsx\" sheet calculated Step Five.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Expense.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation of First-Year Interest on a Loan — Interest_Expense","text":"","code":"Interest_Expense(Loan_Amount = 1000000, Interest_Rate = .06) #> [1] 60000"},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Income.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of Interest Income — Interest_Income","title":"Calculation of Interest Income — Interest_Income","text":"Calculation Interest Income","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Income.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of Interest Income — Interest_Income","text":"","code":"Interest_Income(Total_Estimated_Revenue, Percentage = 4e-04)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Income.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of Interest Income — Interest_Income","text":"Total_Estimated_Revenue Calculation Total_Estimated Revenue Percentage Percentage revenue estimated income interest","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Income.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of Interest Income — Interest_Income","text":"Outputs first-year interest income (dollars)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Income.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculation of Interest Income — Interest_Income","text":"function taken \"Estimating_Expenses.xlsx\" sheet calculated Step Eight.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Income.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation of Interest Income — Interest_Income","text":"","code":"Interest_Income(Total_Estimated_Revenue = 2000000, Percentage = .0004) #> [1] 800"},{"path":"https://dspg-2023.github.io/Grocery/reference/Officer_Compensation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of Officer Compensation — Officer_Compensation","title":"Calculation of Officer Compensation — Officer_Compensation","text":"Calculation Officer Compensation","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Officer_Compensation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of Officer Compensation — Officer_Compensation","text":"","code":"Officer_Compensation(Total_Estimated_Revenue, Percentage = 0.0118)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Officer_Compensation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of Officer Compensation — Officer_Compensation","text":"Total_Estimated_Revenue Output total estimated revenue calculation sheet Percentage Percentage revenue spent officer compensation (default Bizminer)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Officer_Compensation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of Officer Compensation — Officer_Compensation","text":"Outputs dollars spent officer compensation (Total Estimated Revenue * Percentage) (dollars)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Officer_Compensation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculation of Officer Compensation — Officer_Compensation","text":"function taken \"Estimating_Expenses.xlsx\" sheet Step 6.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Officer_Compensation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation of Officer Compensation — Officer_Compensation","text":"","code":"Officer_Compensation(Total_Estimated_Revenue = 2000000, Percentage = .0118) #> [1] 23600"},{"path":"https://dspg-2023.github.io/Grocery/reference/Operating_Income_Loss.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of the Operating Income (loss) — Operating_Income_Loss","title":"Calculation of the Operating Income (loss) — Operating_Income_Loss","text":"Calculation Operating Income (loss)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Operating_Income_Loss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of the Operating Income (loss) — Operating_Income_Loss","text":"","code":"Operating_Income_Loss(   Total_Estimated_Revenue,   Gross_Margin_Percentage = 0.2446 )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Operating_Income_Loss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of the Operating Income (loss) — Operating_Income_Loss","text":"Total_Estimated_Revenue Output total estimated revenue calculation sheet Gross_Margin_Percentage Percentage revenue gross margin (default Bizminer)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Operating_Income_Loss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of the Operating Income (loss) — Operating_Income_Loss","text":"Outputs difference total estimated revenue aggregated expenses (dollars)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Operating_Income_Loss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculation of the Operating Income (loss) — Operating_Income_Loss","text":"function taken \"Estimating_Expenses.xlsx\" sheet calculated Step Six) Functions called: Cost_of_Goods_Sold, Officer_Compensation, Employee_Wages, Other_Operating_Expense","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Operating_Income_Loss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation of the Operating Income (loss) — Operating_Income_Loss","text":"","code":"Employee_Wages(Total_Estimated_Revenue = 2000000) #> [1] 188400"},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Income.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of Other Income — Other_Income","title":"Calculation of Other Income — Other_Income","text":"Calculation Income","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Income.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of Other Income — Other_Income","text":"","code":"Other_Income(Total_Estimated_Revenue)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Income.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of Other Income — Other_Income","text":"Total_Estimated_Revenue Calculation Total_Estimated Revenue","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Income.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of Other Income — Other_Income","text":"Outputs \"Income\" (dollars)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Income.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculation of Other Income — Other_Income","text":"function taken \"Estimating_Expenses.xlsx\" sheet calculated Step Eight. Percentages taken Bizminer.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Income.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation of Other Income — Other_Income","text":"","code":"# Other_Income(Total_Estimated_Revenue = 2000000)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Operating_Expense.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of other operating expenses (miscellaneous) — Other_Operating_Expense","title":"Calculation of other operating expenses (miscellaneous) — Other_Operating_Expense","text":"Calculation operating expenses (miscellaneous)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Operating_Expense.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of other operating expenses (miscellaneous) — Other_Operating_Expense","text":"","code":"Other_Operating_Expense(Total_Estimated_Revenue, Percentage = 0.1088)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Operating_Expense.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of other operating expenses (miscellaneous) — Other_Operating_Expense","text":"Total_Estimated_Revenue Output total estimated revenue calculation sheet Percentage Percentage total estimated revenue spent operating expenses (default Bizminer)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Operating_Expense.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of other operating expenses (miscellaneous) — Other_Operating_Expense","text":"Outputs operating expenses (dollars)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Operating_Expense.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculation of other operating expenses (miscellaneous) — Other_Operating_Expense","text":"function taken \"Estimating_Expenses.xlsx\" sheet calculated Step Six)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Operating_Expense.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation of other operating expenses (miscellaneous) — Other_Operating_Expense","text":"","code":"# Employee_Wages(Total_Estimated_Revenue = 2000000, Percentage = .1088)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Pct_County.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Sum of Quadrant Areas. — Pct_County","title":"Calculates Sum of Quadrant Areas. — Pct_County","text":"Calculates Sum Quadrant Areas.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Pct_County.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Sum of Quadrant Areas. — Pct_County","text":"","code":"Pct_County(north_quad, east_quad, south_quad, west_quad, county_size)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Pct_County.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Sum of Quadrant Areas. — Pct_County","text":"north_quad user defined size north quadrant east_quad user defined size east quadrant south_quad user defined size south quadrant west_quad user defined size west quadrant county_size User defined Size county","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Pct_County.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Sum of Quadrant Areas. — Pct_County","text":"outputs sum quadrant areas","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Primary_Shopper_Count.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Number of Primary Shoppers in Each Marker — Primary_Shopper_Count","title":"Calculates the Number of Primary Shoppers in Each Marker — Primary_Shopper_Count","text":"Calculates Number Primary Shoppers Marker","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Primary_Shopper_Count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Number of Primary Shoppers in Each Marker — Primary_Shopper_Count","text":"","code":"Primary_Shopper_Count(   pct_metro_prim = 50,   pct_rural_prim = 30,   pct_town_prim = 30,   county_pop,   towns_pop,   pct_county,   metro_list,   town_list )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Primary_Shopper_Count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Number of Primary Shoppers in Each Marker — Primary_Shopper_Count","text":"pct_metro_prim percentage primary shoppers metro market default taken 50% unless specified otherwise. pct_rural_prim percentage primary shoppers rural market default taken 30% unless specified otherwise. pct_town_prim percentage primary shoppers town market default taken 30% unless specified otherwise. county_pop population county. towns_pop population towns county. pct_county percentage county market. metro_list lists population store location. town_list list population towns neighborhood.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Primary_Shopper_Count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Number of Primary Shoppers in Each Marker — Primary_Shopper_Count","text":"outputs total number primary shoppers store","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Primary_Shopper_Count.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Number of Primary Shoppers in Each Marker — Primary_Shopper_Count","text":"function taken estimating Market Size.xlsx calculated step 6. function calls Rural_Population() City_Populations()","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Primary_Shopper_Count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the Number of Primary Shoppers in Each Marker — Primary_Shopper_Count","text":"","code":"Primary_Shopper_Count(county_pop=18000,                      towns_pop=9786,                      pct_county=17.7,                      town_list=list(77),                      metro_list=list(2650)) #> [1] 44964"},{"path":"https://dspg-2023.github.io/Grocery/reference/Quadrant_Area.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Area for a  Quarter Circle. — Quadrant_Area","title":"Calculates the Area for a  Quarter Circle. — Quadrant_Area","text":"Calculates Area  Quarter Circle.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Quadrant_Area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Area for a  Quarter Circle. — Quadrant_Area","text":"","code":"Quadrant_Area(user_area)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Quadrant_Area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Area for a  Quarter Circle. — Quadrant_Area","text":"user_area user defined area circle","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Quadrant_Area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Area for a  Quarter Circle. — Quadrant_Area","text":"outputs output_area","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Quadrant_Area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the Area for a  Quarter Circle. — Quadrant_Area","text":"","code":"Quadrant_Area(user_area = 4)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Rare_Shopper_Count.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Number of Rare Shoppers in Each Marker — Rare_Shopper_Count","title":"Calculates the Number of Rare Shoppers in Each Marker — Rare_Shopper_Count","text":"Calculates Number Rare Shoppers Marker","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Rare_Shopper_Count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Number of Rare Shoppers in Each Marker — Rare_Shopper_Count","text":"","code":"Rare_Shopper_Count(   pct_metro_rare = 10,   pct_rural_rare = 20,   pct_town_rare = 20,   county_pop,   towns_pop,   pct_county,   metro_list,   town_list )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Rare_Shopper_Count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Number of Rare Shoppers in Each Marker — Rare_Shopper_Count","text":"pct_metro_rare percentage secondary shoppers metro market default taken 10% unless specified otherwise. pct_rural_rare percentage secondary shoppers rural market default taken 20% unless specified otherwise. pct_town_rare percentage secondary shoppers town market default taken 20% unless specified otherwise. county_pop population county. towns_pop population towns county. pct_county percentage county market. metro_list lists population store location. town_list list population towns neighborhood.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Rare_Shopper_Count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Number of Rare Shoppers in Each Marker — Rare_Shopper_Count","text":"outputs total number Rare shoppers store","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Rare_Shopper_Count.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Number of Rare Shoppers in Each Marker — Rare_Shopper_Count","text":"function taken estimating Market Size.xlsx calculated step 6. function calls Rural_Population() City_Populations()","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Rare_Shopper_Count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the Number of Rare Shoppers in Each Marker — Rare_Shopper_Count","text":"","code":"Rare_Shopper_Count(county_pop=18000,                   towns_pop=9786,                   pct_county=17.7,                   town_list=list(77),                   metro_list=list(2650)) #> [1] 29357"},{"path":"https://dspg-2023.github.io/Grocery/reference/Rural_Population.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation for a quarter circle. — Rural_Population","title":"Calculation for a quarter circle. — Rural_Population","text":"Calculation quarter circle.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Rural_Population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation for a quarter circle. — Rural_Population","text":"","code":"Rural_Population(county_pop, towns_pop, pct_county)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Rural_Population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation for a quarter circle. — Rural_Population","text":"county_pop population whole county towns_pop sum towns populations county pct_county percent county area","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Rural_Population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation for a quarter circle. — Rural_Population","text":"outputs rural population","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Rural_Shoppers_Count.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Count of Rare Shoppers for a Rural Market — Rural_Shoppers_Count","title":"Calculates Count of Rare Shoppers for a Rural Market — Rural_Shoppers_Count","text":"Calculates Count Rare Shoppers Rural Market","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Rural_Shoppers_Count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Count of Rare Shoppers for a Rural Market — Rural_Shoppers_Count","text":"","code":"Rural_Shoppers_Count(pct_primary = 30, pct_secondary = 50, pct_rare = 20)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Rural_Shoppers_Count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Count of Rare Shoppers for a Rural Market — Rural_Shoppers_Count","text":"pct_primary percentage county primary shopper defaulted 30%. pct_secondary percentage county secondary shopper defaulted 50%. pct_rare percentage county rare shopper defaulted 20%.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Rural_Shoppers_Count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Count of Rare Shoppers for a Rural Market — Rural_Shoppers_Count","text":"number shoppers rural shoppers based number primary, secondary, rare shoppers","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Secondary_Shopper_Count.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Number of Secondary Shoppers in Each Marker — Secondary_Shopper_Count","title":"Calculates the Number of Secondary Shoppers in Each Marker — Secondary_Shopper_Count","text":"Calculates Number Secondary Shoppers Marker","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Secondary_Shopper_Count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Number of Secondary Shoppers in Each Marker — Secondary_Shopper_Count","text":"","code":"Secondary_Shopper_Count(   pct_metro_sec = 40,   pct_rural_sec = 50,   pct_town_sec = 50,   county_pop,   towns_pop,   pct_county,   metro_list,   town_list )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Secondary_Shopper_Count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Number of Secondary Shoppers in Each Marker — Secondary_Shopper_Count","text":"pct_metro_sec percentage secondary shoppers metro market default taken 40% unless specified otherwise. pct_rural_sec percentage secondary shoppers rural market default taken 50% unless specified otherwise. pct_town_sec percentage secondary shoppers town market default taken 50% unless specified otherwise. county_pop population county. towns_pop population towns county. pct_county percentage county market. metro_list lists population store location. town_list list population towns neighborhood.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Secondary_Shopper_Count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Number of Secondary Shoppers in Each Marker — Secondary_Shopper_Count","text":"outputs total number secondary shoppers store","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Secondary_Shopper_Count.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Number of Secondary Shoppers in Each Marker — Secondary_Shopper_Count","text":"function taken estimating Market Size.xlsx calculated step 6. function calls Rural_Population() City_Populations()","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Secondary_Shopper_Count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the Number of Secondary Shoppers in Each Marker — Secondary_Shopper_Count","text":"","code":"Secondary_Shopper_Count(county_pop=18000,                        towns_pop=9786,                        pct_county=17.7,                        town_list=list(77),                        metro_list=list(2650)) #> [1] 73792"},{"path":"https://dspg-2023.github.io/Grocery/reference/State_Adj_Capita_Grocery_Spend.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase and State Index — State_Adj_Capita_Grocery_Spend","title":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase and State Index — State_Adj_Capita_Grocery_Spend","text":"Calculates Average per Capita Spending Adjusted Estimated Price Increase State Index","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/State_Adj_Capita_Grocery_Spend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase and State Index — State_Adj_Capita_Grocery_Spend","text":"","code":"State_Adj_Capita_Grocery_Spend(   state_index,   est_per_price_increase = 7,   grocery_sales = 8.11541e+11,   population = 334233854 )"},{"path":"https://dspg-2023.github.io/Grocery/reference/State_Adj_Capita_Grocery_Spend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase and State Index — State_Adj_Capita_Grocery_Spend","text":"state_index ratio current price basket price basket base year est_per_price_increase Estimated increase price grocery cumulative percent default taken 7 2023. grocery_sales Total US grocery sales annually. Default value 811541000000. population Total US population. Default value 334233854.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/State_Adj_Capita_Grocery_Spend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase and State Index — State_Adj_Capita_Grocery_Spend","text":"outputs average per capita grocery spend adjusting expected price increase state index","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/State_Adj_Capita_Grocery_Spend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase and State Index — State_Adj_Capita_Grocery_Spend","text":"function taken Estimating_Revenue.xlsx calculated Step three. function calls Adj_Capita_Grocery_Spend().","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/State_Adj_Capita_Grocery_Spend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase and State Index — State_Adj_Capita_Grocery_Spend","text":"","code":"State_Adj_Capita_Grocery_Spend(99,7) #> [1] 2572"},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Estimate_Revenue.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Estimated Total Revenue — Total_Estimate_Revenue","title":"Calculates the Estimated Total Revenue — Total_Estimate_Revenue","text":"Calculates Estimated Total Revenue","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Estimate_Revenue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Estimated Total Revenue — Total_Estimate_Revenue","text":"","code":"Total_Estimate_Revenue(   per_of_grocery_spend_rare = 5,   per_of_grocery_spend_sec = 25,   per_of_grocery_spend_prim = 60,   pct_metro_prim = 50,   pct_rural_prim = 30,   pct_town_prim = 30,   pct_metro_sec = 40,   pct_rural_sec = 50,   pct_town_sec = 50,   pct_metro_rare = 10,   pct_rural_rare = 20,   pct_town_rare = 20,   county_pop,   towns_pop,   pct_county,   metro_list,   town_list,   state_index,   est_per_price_increase = 7,   grocery_sales = 8.11541e+11,   population = 334233854 )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Estimate_Revenue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Estimated Total Revenue — Total_Estimate_Revenue","text":"per_of_grocery_spend_rare percentage groceries rare shoppers spend proposed store per_of_grocery_spend_sec percentage groceries secondary shoppers spend proposed store per_of_grocery_spend_prim percentage groceries primary shopper spend proposed store pct_metro_prim percentage primary shoppers metro market default taken 50% unless specified otherwise. pct_rural_prim percentage primary shoppers rural market default taken 30% unless specified otherwise. pct_town_prim percentage primary shoppers town market default taken 30% unless specified otherwise. pct_metro_sec percentage secondary shoppers metro market default taken 40% unless specified otherwise. pct_rural_sec percentage secondary shoppers rural market default taken 50% unless specified otherwise. pct_town_sec percentage secondary shoppers town market default taken 50% unless specified otherwise. pct_metro_rare percentage rare shoppers metro market default taken 10% unless specified otherwise. pct_rural_rare percentage rare shoppers rural market default taken 20% unless specified otherwise. pct_town_rare percentage rare shoppers town market default taken 20% unless specified otherwise. county_pop population county. towns_pop population towns county. pct_county percentage county market. metro_list lists population store location. town_list list population towns neighborhood. state_index ratio current price basket price basket base year est_per_price_increase Estimated increase price grocery cumulative percent default taken 7 2023. grocery_sales Total US grocery sales annually. Default value 811541000000. population Total US population. Default value 334233854.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Estimate_Revenue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Estimated Total Revenue — Total_Estimate_Revenue","text":"outputs estimated total revenue proposed store","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Estimate_Revenue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Estimated Total Revenue — Total_Estimate_Revenue","text":"function taken estimating Revenue.xlsx calculated step 4. function calls Total_Spend_Primary_Shoppers(), Total_Spend_Secondary_Shoppers() Total_Spend_Rare_Shoppers()","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Estimate_Revenue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the Estimated Total Revenue — Total_Estimate_Revenue","text":"","code":"Total_Estimate_Revenue(county_pop=18000,                        towns_pop=9786,                        pct_county=17.7,                        town_list=list(77),                        metro_list=list(2650),                        state_index=99) #> [1] 120612011"},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Primary_Shoppers.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the money spent by primary shoppers — Total_Spend_Primary_Shoppers","title":"Calculates the money spent by primary shoppers — Total_Spend_Primary_Shoppers","text":"Calculates money spent primary shoppers","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Primary_Shoppers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the money spent by primary shoppers — Total_Spend_Primary_Shoppers","text":"","code":"Total_Spend_Primary_Shoppers(   per_of_grocery_spend_prim = 60,   pct_metro_prim = 50,   pct_rural_prim = 30,   pct_town_prim = 30,   county_pop,   towns_pop,   pct_county,   metro_list,   town_list,   state_index,   est_per_price_increase = 7,   grocery_sales = 8.11541e+11,   population = 334233854 )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Primary_Shoppers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the money spent by primary shoppers — Total_Spend_Primary_Shoppers","text":"per_of_grocery_spend_prim percentage groceries primary shopper spend proposed store pct_metro_prim percentage primary shoppers metro market default taken 50% unless specified otherwise. pct_rural_prim percentage primary shoppers rural market default taken 30% unless specified otherwise. pct_town_prim percentage primary shoppers town market default taken 30% unless specified otherwise. county_pop population county. towns_pop population towns county. pct_county percentage county market. metro_list lists population store location. town_list list population towns neighborhood. state_index ratio current price basket price basket base year est_per_price_increase Estimated increase price grocery cumulative percent default taken 7 2023. grocery_sales Total US grocery sales annually. Default value 811541000000. population Total US population. Default value 334233854.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Primary_Shoppers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the money spent by primary shoppers — Total_Spend_Primary_Shoppers","text":"outputs total spending Primary Shoppers proposed store","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Primary_Shoppers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the money spent by primary shoppers — Total_Spend_Primary_Shoppers","text":"function taken estimating Revenue.xlsx calculated step 4. function calls State_Adj_Capita_Grocery_Spend() Primary_Shopper_Count()","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Primary_Shoppers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the money spent by primary shoppers — Total_Spend_Primary_Shoppers","text":"","code":"Total_Spend_Primary_Shoppers(county_pop=18000,                              towns_pop=9786,                              pct_county=17.7,                              town_list=list(77),                              metro_list=list(2650),                              est_per_price_increase=7,                              state_index=99) #> [1] 69388445"},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Rare_Shoppers.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Money Spent by Rare Shoppers — Total_Spend_Rare_Shoppers","title":"Calculates the Money Spent by Rare Shoppers — Total_Spend_Rare_Shoppers","text":"Calculates Money Spent Rare Shoppers","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Rare_Shoppers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Money Spent by Rare Shoppers — Total_Spend_Rare_Shoppers","text":"","code":"Total_Spend_Rare_Shoppers(   per_of_grocery_spend_rare = 5,   pct_metro_rare = 10,   pct_rural_rare = 20,   pct_town_rare = 20,   county_pop,   towns_pop,   pct_county,   metro_list,   town_list,   state_index,   est_per_price_increase = 7,   grocery_sales = 8.11541e+11,   population = 334233854 )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Rare_Shoppers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Money Spent by Rare Shoppers — Total_Spend_Rare_Shoppers","text":"per_of_grocery_spend_rare percentage groceries rare shoppers spend proposed store pct_metro_rare percentage rare shoppers metro market default taken 10% unless specified otherwise. pct_rural_rare percentage rare shoppers rural market default taken 20% unless specified otherwise. pct_town_rare percentage rare shoppers town market default taken 20% unless specified otherwise. county_pop population county towns_pop population towns county pct_county percentage county market metro_list lists population store location town_list list population towns neighborhood state_index ratio current price basket price basket base year est_per_price_increase Estimated increase price grocery cumulative percent default taken 7 2023. grocery_sales Total US grocery sales annually. Default value 811541000000. population Total US population. Default value 334233854.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Rare_Shoppers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Money Spent by Rare Shoppers — Total_Spend_Rare_Shoppers","text":"outputs total spending rare Shoppers proposed store","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Rare_Shoppers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Money Spent by Rare Shoppers — Total_Spend_Rare_Shoppers","text":"function taken estimating Revenue.xlsx calculated step 4. function calls State_Adj_Capita_Grocery_Spend() Rare_Shopper_Count()","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Rare_Shoppers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the Money Spent by Rare Shoppers — Total_Spend_Rare_Shoppers","text":"","code":"Total_Spend_Rare_Shoppers(county_pop=18000,                           towns_pop=9786,                           pct_county=17.7,                           town_list=list(77),                           metro_list=list(2650),                           state_index=99) #> [1] 3775310"},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Secondary_Shoppers.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Money Spent by Secondary Shoppers — Total_Spend_Secondary_Shoppers","title":"Calculates the Money Spent by Secondary Shoppers — Total_Spend_Secondary_Shoppers","text":"Calculates Money Spent Secondary Shoppers","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Secondary_Shoppers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Money Spent by Secondary Shoppers — Total_Spend_Secondary_Shoppers","text":"","code":"Total_Spend_Secondary_Shoppers(   per_of_grocery_spend_sec = 25,   pct_metro_sec = 40,   pct_rural_sec = 50,   pct_town_sec = 50,   county_pop,   towns_pop,   pct_county,   metro_list,   town_list,   state_index,   est_per_price_increase = 7,   grocery_sales = 8.11541e+11,   population = 334233854 )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Secondary_Shoppers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Money Spent by Secondary Shoppers — Total_Spend_Secondary_Shoppers","text":"per_of_grocery_spend_sec percentage groceries secondary shoppers spend proposed store pct_metro_sec percentage secondary shoppers metro market default taken 40% unless specified otherwise. pct_rural_sec percentage secondary shoppers rural market default taken 50% unless specified otherwise. pct_town_sec percentage secondary shoppers town market default taken 50% unless specified otherwise. county_pop population county towns_pop population towns county pct_county percentage county market metro_list lists population store location town_list list population towns neighborhood state_index ratio current price basket price basket base year est_per_price_increase Estimated increase price grocery cumulative percent default taken 7 2023. grocery_sales Total US grocery sales annually. Default value 811541000000. population Total US population. Default value 334233854.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Secondary_Shoppers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Money Spent by Secondary Shoppers — Total_Spend_Secondary_Shoppers","text":"outputs total spending secondary Shoppers proposed store","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Secondary_Shoppers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Money Spent by Secondary Shoppers — Total_Spend_Secondary_Shoppers","text":"function taken estimating Revenue.xlsx calculated step 4. function calls State_Adj_Capita_Grocery_Spend() Secondary_Shopper_Count()","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Secondary_Shoppers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the Money Spent by Secondary Shoppers — Total_Spend_Secondary_Shoppers","text":"","code":"Total_Spend_Secondary_Shoppers(county_pop=18000,                                towns_pop=9786,                                pct_county=17.7,                                town_list=list(77),                                metro_list=list(2650),                                state_index=99,                                est_per_price_increase=7) #> [1] 47448256"}]
