[{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://dspg-2023.github.io/Grocery/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://dspg-2023.github.io/Grocery/articles/Est-Expenses.html","id":"estimating-expenses","dir":"Articles","previous_headings":"","what":"Estimating Expenses","title":"Estimating Expenses","text":"One essential element calculation store profitability estimation various expenses potential store owner might deal open. Categories expenses include: much total estimated revenue spent cost goods (inventory)? Covers expenses compensation company officers, employee wages common operating expenses grocery stores Covers annual loss depreciation various assets required operate grocery store Annual interest loan payments (loan taken ) Annual cost rent leased building Another important factor consider secondary sources income. sources may include: Income interest Income collected interest-bearing assets. Income include special services outside revenue sold goods alone, special grocery delivery services project, decided give freedom user determine individual percentage total estimated revenue spent kind expense, also giving user default value guide . default value taken Bizminer, business data reporting platform supplies us industry average percentages category expense. Users able : Switch multiple ownership scenarios 3 different scenarios: User owns building. User rents building. User establishes another holding company owns building, rents company. Input expense percentages interactive sliders Sliders contain “Bizminer Default” tick mark Enter custom list assets calculate cost depreciation Default assets listed along multiple boxes custom assets Users enter custom dollar values assets Enter custom loan rent information Users can calculate annual interest loan Users can calculate annual rent given rate monthly rent Ultimately, estimated expenses subtracted total estimated revenue estimated secondary income added. give user estimate pre-tax profit given store location hope help coming decision.","code":""},{"path":"https://dspg-2023.github.io/Grocery/articles/Est-Market-Size.html","id":"dspggrocery-current-operations","dir":"Articles","previous_headings":"","what":"DSPGGrocery Current Operations","title":"Estimating Market Size","text":"Estimating market size three main components. Metro population, population, rural population. Metro population number people live town proposed grocery store . Determining simple parsing name town using tidycensus get population. Next populations towns around building store. complicated, using buffer around city figure names towns, can use loop tidycensus. Rural population people don’t live city. can figure roughly figuring people live county, subtracting people live cities county. multiply percentage area county covered market area. constricted counties, gives rough estimate. calculations estimating area covered trade area finding distance nearest store quadrant (NE, NW, SE, SW). use distance radius quarter circle figure much reach store . bad way determining market region thing takes account distance closest store, also ignores radius store . elegant solution Voronoi polygons Reilly’s law Retail Gravitation.","code":""},{"path":[]},{"path":"https://dspg-2023.github.io/Grocery/articles/Est-Market-Size.html","id":"voronoi","dir":"Articles","previous_headings":"Alternates","what":"Voronoi","title":"Estimating Market Size","text":"Voronoi Polygon polygon defined points region closer parent node nodes. show us accurate estimate market area take store account people live nearer store store likely choose shop one instead.","code":""},{"path":"https://dspg-2023.github.io/Grocery/articles/Est-Market-Size.html","id":"reillys-law","dir":"Articles","previous_headings":"Alternates","what":"Reilly’s Law","title":"Estimating Market Size","text":"Reilly’s law economic principle states people drawn areas higher population smaller populations. excellent way estimate market area, somewhat complicated. Maps usually edited hand account geographic barriers rivers, various limitations populations two cities relatively similar.","code":""},{"path":"https://dspg-2023.github.io/Grocery/articles/Est-Market-Size.html","id":"huffs-law","dir":"Articles","previous_headings":"Alternates","what":"Huff’s Law","title":"Estimating Market Size","text":"Huff’s law probabilistic model estimating consumer attraction. states attractiveness store something called distance decay determine likelihood someone visiting store. Distance decay idea people move farther farther away, likelihood exponentially decreases visit store. real world mean even though store might 10 times attractive another, 10 times farther away, likely travel .","code":""},{"path":[]},{"path":"https://dspg-2023.github.io/Grocery/articles/Est-Market-Size.html","id":"shaping-the-data","dir":"Articles","previous_headings":"Code","what":"Shaping the data","title":"Estimating Market Size","text":"needed several helper methods shape data way want . Address Parser simple function take address string turn list. also made function takes address, parses , converts dataframe columns cities county populations. used lot throughout functions. program able pull Google Places API find nearby stores, gives us latitude longitude stores, distance, direction. function takes data frame API call figures direction stores , returns nearest store quadrant. original data frame gives us lat longs, measure position distance, first convert another coordinate system called UTM, Universal Transverse Mercator coordinates. measure distance, can easily compare points find distance , since based far East North point , can determine direction origin point new point .","code":"Address_Parser <- function(address) {   split_addr <- as.list(strsplit(address, \", \")[[1]])   names(split_addr) <- c(\"street\", \"city\", \"state\")   return(split_addr) } Pop_Binder <- function(address) {    #Doing this because I want to use this variable in Metro_Pop   splt_addr <- Address_Parser(address)     geocoded_address <- geocode(location = address, output = \"all\")   geo_county <- geocoded_address[[\"results\"]][[1]][[\"address_components\"]][[4]][[\"long_name\"]]   geo_county <- gsub( \" County\", \"\", as.character(geo_county))    city_df <- data.frame(state = splt_addr[5], county = geo_county, city = splt_addr[2])     #city_df <- data.frame(state = \"Iowa\", county = \"Sac\")   city_in_county <- get_cities_in_county(city_df[1,])   county_cities_list <- stringr::str_split(city_in_county$city_list, \", \")    #This gives us the name of city and the population. We need to separate city   #and state name, and then remove the city and CDP from the NAME so we can join   #with the county_cities_list    place_pop <- get_decennial(year = 2020,                              geography = \"place\",                              variables = \"DP1_0001C\",                              sumfile = \"dp\",                              state = city_in_county[1])   place_pop$NAME <- gsub( \" city\", \"\", as.character(place_pop$NAME))   place_pop$NAME <- gsub( \" CDP\", \"\", as.character(place_pop$NAME))   place_pop <- separate(data = place_pop, col = NAME, into = c(\"City\", \"State\"), sep = \";\")         #Convert County cities list to a data frame in the correct shape and name   #to join with place_pop   county_cities_df <- data.frame(unlist(county_cities_list))   lookup <- c(City = \"unlist.county_cities_list.\")   county_cities_df <- rename(county_cities_df, all_of(lookup))    bound_df <- merge(county_cities_df, place_pop, by='City')   cbind(bound_df, County = geo_county)  } Distance_Comparator <- function(df_places_grocery) {    #Creates a new dataframe with the Lat, Long, and Name columns   #This step is completely unnecessary, but the original DF   #had awful column names and I didn't want to have to look at all   #the other columns   api_stores <- data.frame( Name = df_places_grocery$name,                             lat = df_places_grocery$lat,                             lng = df_places_grocery$lng)    #Add Northing and Easting Columns   UTM_geo <- lonlat2utm(longitude = df_geocode$lng,                              latitude = df_geocode$lat,                              zone = UTM_Zoner(abs(api_stores$lng[1])))   df_geocode <- cbind(df_geocode, UTM_geo)    UTM_df <- lonlat2utm(longitude = api_stores$lng,                             latitude = api_stores$lat,                             zone = UTM_Zoner(abs(api_stores$lng[1])))   api_stores <- cbind(api_stores, UTM_df)    # Save variables for testing.   #this is not a test I need this   origin_test <- c(df_geocode$easting, df_geocode$northing)   end_test <- matrix(c(api_stores$easting, api_stores$northing), ncol = 2)     #### FUNCTION TEST - Call Function   #this is not a test function, this is integral to the program functionality   #this saves a global variable named df_new with the distance appended   Distance_Euclidean(api_stores, origin = origin_test, end = end_test)      # Create Dataframes with stores in each quadrant    #Creates a new dataframe with all of the stores in each quadrant   northeast_stores <- df_new %>% filter(as.numeric(df_new$northing)                                         > as.numeric(df_geocode$northing[1])                                         & as.numeric(df_new$easting)                                         > as.numeric(df_geocode$easting[1]))    northwest_stores <- df_new %>% filter(as.numeric(df_new$northing)                                         > as.numeric(df_geocode$northing[1])                                         & as.numeric(df_new$easting)                                         < as.numeric(df_geocode$easting[1]))     southeast_stores <- df_new %>% filter(as.numeric(df_new$northing)                                         < as.numeric(df_geocode$northing[1])                                         & as.numeric(df_new$easting)                                         > as.numeric(df_geocode$easting[1]))    southwest_stores <- df_new %>% filter(as.numeric(df_new$northing)                                         < as.numeric(df_geocode$northing[1])                                         & as.numeric(df_new$easting)                                         < as.numeric(df_geocode$easting[1]))     # Find distance to nearest in each quadrant    #I guess in a conversion somewhere the value is being squared. Square rooting   #Makes this correct.   #Using %/%1 to remove decimal point   northeast_dist <<- sqrt(min(northeast_stores$distance_vector))%/%1   northwest_dist <<-sqrt(min(northwest_stores$distance_vector))%/%1   southeast_dist <<- sqrt(min(southeast_stores$distance_vector))%/%1   southwest_dist <<- sqrt(min(southwest_stores$distance_vector))%/%1     #df_new but with only closest stores named df_circle_buffer   NE_min <- northeast_stores %>% filter(northeast_stores$distance_vector                                         ==min(northeast_stores$distance_vector))   NW_min <- northwest_stores %>% filter(northwest_stores$distance_vector                                         ==min(northwest_stores$distance_vector))   SE_min <- southeast_stores %>% filter(southeast_stores$distance_vector                                         ==min(southeast_stores$distance_vector))   SW_min <- southwest_stores %>% filter(southwest_stores$distance_vector                                         ==min(southwest_stores$distance_vector))   return(df_circle_buffer <- rbind(NE_min,NW_min,SE_min,SW_min))   #add NESW labels   }"},{"path":"https://dspg-2023.github.io/Grocery/articles/Est-Market-Size.html","id":"metro-population","dir":"Articles","previous_headings":"Code","what":"Metro population","title":"Estimating Market Size","text":"Metro population super simple function. takes address parameter, parses address, filters just cities name. #TODO add Cities Pop Rural Pop","code":"Metro_Pop <- function(address) {   #We should be saving address as a global variable so we don't have to pass it   #as a parameter in most of my functions   splt_addr <- Address_Parser(address)   df %>% filter(City == splt_addr[\"city\"])   return(df$value) } library(DSPGGrocery) #>  #> Attaching package: 'DSPGGrocery' #> The following object is masked _by_ '.GlobalEnv': #>  #>     Address_Parser"},{"path":"https://dspg-2023.github.io/Grocery/articles/Est-Total-Revenue.html","id":"estimating-revenue","dir":"Articles","previous_headings":"","what":"Estimating Revenue","title":"Estimating Total Revenue","text":"revenue estimation, need average spending per capita number shoppers category (Primary, Secondary, Rare) type market (Metro, Rural, Town).","code":""},{"path":"https://dspg-2023.github.io/Grocery/articles/Est-Total-Revenue.html","id":"average-per-capita-grocery-spend","dir":"Articles","previous_headings":"Estimating Revenue","what":"Average Per Capita Grocery Spend","title":"Estimating Total Revenue","text":"Avg_Capita_Grocery_Spending() function calculates average per capita spending. 2022 total US grocery sales data taken IBIS divided 2022 total US population US Census Bureau. Since population grocery sales taken 2022 data, must account change current year. adjusted functions Adj_Capita_Grocery_Spend() State_Adj_Capita_Grocery_Spend() using CPI (Consumer Price Index) RPP (Rural Price Parities), respectively. Consumer Price Index (CPI) measure average change time prices paid urban consumers market basket consumer goods services. , adjusting according CPI accounts inflation US. Regional price parities (RPP) measure differences price levels across states metropolitan areas given year expressed percentage overall national price level. Adjusting according measure gives state’s average per capita spending groceries year.","code":""},{"path":"https://dspg-2023.github.io/Grocery/articles/Est-Total-Revenue.html","id":"total-spend-by-category","dir":"Articles","previous_headings":"Estimating Revenue","what":"Total Spend by Category","title":"Estimating Total Revenue","text":"next component needed estimating revenue number shoppers category type market. classify shoppers 3 categories: Primary Shoppers: people household grocery shopping. Secondary Shoppers: Rare Shoppers: People occasional shoppers. classify shoppers 3 different populations: Metro: population city store planned open Town: Population cities market Rural: Total rural population market functions: Primary_Shopper_Count(), Secondary_Shopper_Count(), Rare_Shopper_Count() calculates number shoppers category type market. outputs functions used calculating total spend groups Total_Spend_Primary_Shoppers(), Total_Spend_Secondary_Shoppers(), Total_Spend_Rare_Shoppers() functions. information data update frequency sources, check table: CPI current year - CPI base year now, defaulting 7 2023","code":""},{"path":"https://dspg-2023.github.io/Grocery/articles/Est-Total-Revenue.html","id":"total-revenue-estimate","dir":"Articles","previous_headings":"Estimating Revenue","what":"Total Revenue Estimate","title":"Estimating Total Revenue","text":"Total revenue estimated summing total spend primary, secondary, rare shoppers Total_Estimate_Revenue().","code":""},{"path":"https://dspg-2023.github.io/Grocery/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Harun Celik. Maintainer.","code":""},{"path":"https://dspg-2023.github.io/Grocery/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Celik H, Raja S, Null , Cory (2023). DSPGGrocery: Decision Making Rural Grocery Stores. R package version 0.1.0.","code":"@Manual{,   title = {DSPGGrocery: Decision Making for Rural Grocery Stores},   author = {Harun Celik and Srika Raja and Aaron Null and Alex Cory},   year = {2023},   note = {R package version 0.1.0}, }"},{"path":"https://dspg-2023.github.io/Grocery/index.html","id":"dspgrocery","dir":"","previous_headings":"","what":"Decision Making for Rural Grocery Stores","title":"Decision Making for Rural Grocery Stores","text":"goal DSPGrocery provide R based tool help users decision-making opening grocery store rural environment. tool R Shiny app uses functions DSPGrocery package generate market size, estimated revenue, expenses demographic information.","code":""},{"path":"https://dspg-2023.github.io/Grocery/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Decision Making for Rural Grocery Stores","text":"can install development version DSPGrrocery GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"DSPG-2023/Grocery\")"},{"path":"https://dspg-2023.github.io/Grocery/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Decision Making for Rural Grocery Stores","text":"R Shiny tool DSPGrocery package designed alternative interfaces Excel tool developed ISU Extension Outreach Farm, Food Enterprise Development Program. Excel workbooks divided following three sections. Estimating Market Size Estimating Revenue Estimating Expenses correspond articles vignette sections documenting excel tools first converted R functions later updated suit needs R Shiny interface. articles can found Articles tab navigation bar.","code":""},{"path":"https://dspg-2023.github.io/Grocery/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Decision Making for Rural Grocery Stores","text":"functions package can also used independently R Shiny tool desired. Simply call functions loading library. caveat portion functions documentation helper functions shouldn’t called directly. Referring documentation determine functions called best practice.","code":"library(DSPGGrocery)  ## Here is an example outputting the Gross Margin value using a function from the ## package.  GrossMargin <- Gross_Margin(Total_Estimated_Revenue = 120000,                              Percentage = .25)  print(sprintf(\"Total Gross Margin: $%d\", GrossMargin)) #> [1] \"Total Gross Margin: $30000\""},{"path":"https://dspg-2023.github.io/Grocery/reference/Address_Parser.html","id":null,"dir":"Reference","previous_headings":"","what":"Parses an Address — Address_Parser","title":"Parses an Address — Address_Parser","text":"takes address string separated commas returns address parsed list form.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Address_Parser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parses an Address — Address_Parser","text":"","code":"Address_Parser(address)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Address_Parser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parses an Address — Address_Parser","text":"address address character parsed.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Address_Parser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parses an Address — Address_Parser","text":"split_addr data frame columns street, city, state abbreviation, county, state.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Address_Parser.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parses an Address — Address_Parser","text":"Alex Cory","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Adj_Capita_Grocery_Spend.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Average Per Capita Spending Adjusted by Estimated Price Increase — Adj_Capita_Grocery_Spend","title":"Calculates Average Per Capita Spending Adjusted by Estimated Price Increase — Adj_Capita_Grocery_Spend","text":"function returns average per capita spending adjusting percentage price increase base year(2022).","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Adj_Capita_Grocery_Spend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Average Per Capita Spending Adjusted by Estimated Price Increase — Adj_Capita_Grocery_Spend","text":"","code":"Adj_Capita_Grocery_Spend(   est_per_price_increase = 7,   grocery_sales = 8.11541e+11,   population = 334233854 )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Adj_Capita_Grocery_Spend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Average Per Capita Spending Adjusted by Estimated Price Increase — Adj_Capita_Grocery_Spend","text":"est_per_price_increase Estimated increase price grocery cumulative percent default taken 7 2023 grocery_sales Total US grocery sales annually. Default value 811541000000. population Total US population. Default value 334233854.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Adj_Capita_Grocery_Spend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Average Per Capita Spending Adjusted by Estimated Price Increase — Adj_Capita_Grocery_Spend","text":"Outputs average per capita grocery spend adjusting expected price increase.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Adj_Capita_Grocery_Spend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates Average Per Capita Spending Adjusted by Estimated Price Increase — Adj_Capita_Grocery_Spend","text":"function taken Estimating_Revenue.xlsx calculated Step two. function calls Avg_Capita_Grocery_Spending().","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Adj_Capita_Grocery_Spend.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates Average Per Capita Spending Adjusted by Estimated Price Increase — Adj_Capita_Grocery_Spend","text":"Srika Raja","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Adj_Capita_Grocery_Spend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates Average Per Capita Spending Adjusted by Estimated Price Increase — Adj_Capita_Grocery_Spend","text":"","code":"Adj_Capita_Grocery_Spend() #> [1] 2598.028"},{"path":"https://dspg-2023.github.io/Grocery/reference/Annual_Rent.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Annual Cost of Rent for Grocery Stores (Scenario 2) — Annual_Rent","title":"Calculates the Annual Cost of Rent for Grocery Stores (Scenario 2) — Annual_Rent","text":"function calculates annual cost rent hypothetical store user-selected location based user-provided monthly rate rent building. function employed user plans building (scenario 1).","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Annual_Rent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Annual Cost of Rent for Grocery Stores (Scenario 2) — Annual_Rent","text":"","code":"Annual_Rent(Monthly_Rent = 0)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Annual_Rent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Annual Cost of Rent for Grocery Stores (Scenario 2) — Annual_Rent","text":"Monthly_Rent User-provided monthly rate rent building.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Annual_Rent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Annual Cost of Rent for Grocery Stores (Scenario 2) — Annual_Rent","text":"output returns estimated dollar amount spent rent per year hypothetical grocery store given building.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Annual_Rent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Annual Cost of Rent for Grocery Stores (Scenario 2) — Annual_Rent","text":"function multiplies user-provided monthly rate rent building 12 get annual cost rent.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Annual_Rent.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the Annual Cost of Rent for Grocery Stores (Scenario 2) — Annual_Rent","text":"Aaron Null","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Avg_Capita_Grocery_Spending.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Average Grocery Spending Per Capita. — Avg_Capita_Grocery_Spending","title":"Calculates Average Grocery Spending Per Capita. — Avg_Capita_Grocery_Spending","text":"function returns average per capita spending taking ratio grocery sales population base year(2022).","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Avg_Capita_Grocery_Spending.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Average Grocery Spending Per Capita. — Avg_Capita_Grocery_Spending","text":"","code":"Avg_Capita_Grocery_Spending(   grocery_sales = 8.11541e+11,   population = 334233854 )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Avg_Capita_Grocery_Spending.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Average Grocery Spending Per Capita. — Avg_Capita_Grocery_Spending","text":"grocery_sales Total US grocery sales annually. Default value 811541000000. population Total US population. Default value 334233854.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Avg_Capita_Grocery_Spending.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Average Grocery Spending Per Capita. — Avg_Capita_Grocery_Spending","text":"Outputs average grocery spending per capita.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Avg_Capita_Grocery_Spending.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates Average Grocery Spending Per Capita. — Avg_Capita_Grocery_Spending","text":"function taken Estimating_Revenue.xlsx calculated Step One.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Avg_Capita_Grocery_Spending.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates Average Grocery Spending Per Capita. — Avg_Capita_Grocery_Spending","text":"Srika Raja","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Avg_Capita_Grocery_Spending.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates Average Grocery Spending Per Capita. — Avg_Capita_Grocery_Spending","text":"","code":"Avg_Capita_Grocery_Spending(grocery_sales = 811541000000, population = 334233854) #> [1] 2428.063"},{"path":"https://dspg-2023.github.io/Grocery/reference/Calc_Cities_Pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Population of Cities by County Geography — Calc_Cities_Pop","title":"Calculates the Population of Cities by County Geography — Calc_Cities_Pop","text":"helper function DSPGrocery::Auto_Rural_Pop function calculates total population cities within county intersect county geography. call first pulls cities provided state uses sf::st_join join based county instersections.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Calc_Cities_Pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Population of Cities by County Geography — Calc_Cities_Pop","text":"","code":"Calc_Cities_Pop(states_unique, all_counties_pops)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Calc_Cities_Pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Population of Cities by County Geography — Calc_Cities_Pop","text":"states_unique vector unique state FIPS codes inherited df_buffer_loc parameter DSPGrocery::Auto_Rural_Pop. all_counties_pops returned data frame inherited call DSPGrocery::Calc_Counties_Pop.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Calc_Cities_Pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Population of Cities by County Geography — Calc_Cities_Pop","text":"function returns data frame called all_cities_intersect containing county, city, city population, sf geographies. data frame returned attribute called \"all_population\" sum city populations.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Calc_Cities_Pop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Population of Cities by County Geography — Calc_Cities_Pop","text":"call uses data pulled United States Census Bureau call tidycensus API, tidycensus::get_decennial.","code":""},{"path":[]},{"path":"https://dspg-2023.github.io/Grocery/reference/Calc_Cities_Pop.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the Population of Cities by County Geography — Calc_Cities_Pop","text":"Harun Celik","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Calc_Counties_Pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Population of Counties Given a Vector of Counties and States — Calc_Counties_Pop","title":"Calculates the Population of Counties Given a Vector of Counties and States — Calc_Counties_Pop","text":"helper function DSPGrocery::Auto_Rural_Pop function calculates total population counties within states given data frame containing vector county names state names.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Calc_Counties_Pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Population of Counties Given a Vector of Counties and States — Calc_Counties_Pop","text":"","code":"Calc_Counties_Pop(states_unique, df_buffer_loc)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Calc_Counties_Pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Population of Counties Given a Vector of Counties and States — Calc_Counties_Pop","text":"states_unique vector unique state FIPS codes inherited df_buffer_loc parameter DSPGrocery::Auto_Rural_Pop. df_buffer_loc data frame inherited DSPGrocery::Auto_Rural_Pop.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Calc_Counties_Pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Population of Counties Given a Vector of Counties and States — Calc_Counties_Pop","text":"function returns data frame called all_counties_pops containing county, county population, sf geographies. data frame returned attribute called \"all_population\" sum county populations.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Calc_Counties_Pop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Population of Counties Given a Vector of Counties and States — Calc_Counties_Pop","text":"call uses data pulled United States Census Bureau call tidycensus API, tidycensus::get_decennial.","code":""},{"path":[]},{"path":"https://dspg-2023.github.io/Grocery/reference/Calc_Counties_Pop.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the Population of Counties Given a Vector of Counties and States — Calc_Counties_Pop","text":"Harun Celik","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/City_Populations.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation for Population of Cities in Quarter Circle. — City_Populations","title":"Calculation for Population of Cities in Quarter Circle. — City_Populations","text":"Calculation Population Cities Quarter Circle.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/City_Populations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation for Population of Cities in Quarter Circle. — City_Populations","text":"","code":"City_Populations(list_in)"},{"path":"https://dspg-2023.github.io/Grocery/reference/City_Populations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation for Population of Cities in Quarter Circle. — City_Populations","text":"list_in user defined list population towns","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/City_Populations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation for Population of Cities in Quarter Circle. — City_Populations","text":"outputs sum town populations","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/City_Populations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation for Population of Cities in Quarter Circle. — City_Populations","text":"","code":"City_Populations(list(77)) #> [1] 77"},{"path":"https://dspg-2023.github.io/Grocery/reference/Cost_of_Goods_Sold.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Cost of Goods Sold Based on Gross Margin for Grocery Stores — Cost_of_Goods_Sold","title":"Calculates the Cost of Goods Sold Based on Gross Margin for Grocery Stores — Cost_of_Goods_Sold","text":"function calculates estimated cost goods sold based selected gross margin percentage hypothetical grocery store user-selected location.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Cost_of_Goods_Sold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Cost of Goods Sold Based on Gross Margin for Grocery Stores — Cost_of_Goods_Sold","text":"","code":"Cost_of_Goods_Sold(Total_Estimated_Revenue, Gross_Margin_Percentage = 0.2446)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Cost_of_Goods_Sold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Cost of Goods Sold Based on Gross Margin for Grocery Stores — Cost_of_Goods_Sold","text":"Total_Estimated_Revenue Total estimated revenue based market size/location. Gross_Margin_Percentage Percentage total estimated revenue expected gross margin selected via user input (default Bizminer).","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Cost_of_Goods_Sold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Cost of Goods Sold Based on Gross Margin for Grocery Stores — Cost_of_Goods_Sold","text":"output returns estimated dollar amount cost goods sold hypothetical grocery store given location.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Cost_of_Goods_Sold.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Cost of Goods Sold Based on Gross Margin for Grocery Stores — Cost_of_Goods_Sold","text":"function calls \"Gross_Margin()\" function DSPG package body. function based upon calculations originally formulated FFED ISU Extension Outreach.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Cost_of_Goods_Sold.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the Cost of Goods Sold Based on Gross Margin for Grocery Stores — Cost_of_Goods_Sold","text":"Aaron Null","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Create_Circle_Buffer.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a Circle Buffer to the Furthest of Four Nearest Stores in a Quadrant — Create_Circle_Buffer","title":"Creates a Circle Buffer to the Furthest of Four Nearest Stores in a Quadrant — Create_Circle_Buffer","text":"function produces data frames required spatial mapping census api calls DSPGrocery tool. See returns section check list objects.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Create_Circle_Buffer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a Circle Buffer to the Furthest of Four Nearest Stores in a Quadrant — Create_Circle_Buffer","text":"","code":"Create_Circle_Buffer(address, api_key, keyword)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Create_Circle_Buffer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a Circle Buffer to the Furthest of Four Nearest Stores in a Quadrant — Create_Circle_Buffer","text":"address comma seperated address character. api_key google api key used key argument googleway::set_key. keyword keyword argument used googleway::google_places api call.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Create_Circle_Buffer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a Circle Buffer to the Furthest of Four Nearest Stores in a Quadrant — Create_Circle_Buffer","text":"output returns spatial features required create leaflet map. function returns list called Store_Info holds objects df_grocery_all, df_grocery_only, df_grocery_circle, buffer_point_origin, store_points, furthest_point,buffer_circle, all_counties, grocery_counties_inter, grocery_cities_inter","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Create_Circle_Buffer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates a Circle Buffer to the Furthest of Four Nearest Stores in a Quadrant — Create_Circle_Buffer","text":"function makes use googleway tigris API. googleway API requires key.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Create_Circle_Buffer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates a Circle Buffer to the Furthest of Four Nearest Stores in a Quadrant — Create_Circle_Buffer","text":"Harun Celik","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_1.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Cost of Depreciation Based on List of Assets (For a Building Owner) — Depreciation_1","title":"Calculates the Cost of Depreciation Based on List of Assets (For a Building Owner) — Depreciation_1","text":"function calculates estimated cost annual depreciation assets grocery stores (specifically scenario 1 building owned, rented).","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Cost of Depreciation Based on List of Assets (For a Building Owner) — Depreciation_1","text":"","code":"Depreciation_1(   Building_Remodeling,   Parking_Lot_Improvements,   Shelving_Check_Out_Counters,   Computer_Equipment_POS,   Vehicles,   Display_Cases,   Refrigeration,   Freezers,   Meat_Cutting_Equipment,   Miscellaneous_Assets_1,   Miscellaneous_Assets_1_Use_Life,   Miscellaneous_Assets_2,   Miscellaneous_Assets_2_Use_Life,   Miscellaneous_Assets_3,   Miscellaneous_Assets_3_Use_Life )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Cost of Depreciation Based on List of Assets (For a Building Owner) — Depreciation_1","text":"Building_Remodeling Cost  Building/Remodeling. Parking_Lot_Improvements Cost Parking Lot Improvements. Shelving_Check_Out_Counters Cost Shelving/Check Counters. Computer_Equipment_POS Cost Computer System/POS. Vehicles Cost Vehicles. Display_Cases Cost Display cases. Refrigeration Cost Refrigeration. Freezers Cost Freezers. Meat_Cutting_Equipment Cost Meat-cutting Equipment. Miscellaneous_Assets_1 (Optional) Cost Miscellaneous Asset (1) Miscellaneous_Assets_1_Use_Life (Optional) Use Life Miscellaneous Asset (1) Miscellaneous_Assets_2 (Optional) Cost Miscellaneous Asset (2) Miscellaneous_Assets_2_Use_Life (Optional) Use Life Miscellaneous Asset (2) Miscellaneous_Assets_3 (Optional) Cost Miscellaneous Asset (3) Miscellaneous_Assets_3_Use_Life (Optional) Use life Miscellaneous Asset (3)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Cost of Depreciation Based on List of Assets (For a Building Owner) — Depreciation_1","text":"output returns estimated dollar amount lost annually asset depreciation hypoththetical grocery store.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Cost of Depreciation Based on List of Assets (For a Building Owner) — Depreciation_1","text":"function based upon calculations originally formulated FFED ISU Extension Outreach. values various assets divided use life get annual loss depreciation asset. values added get total annual loss asset depreciation/amortization. Users can enter 3 miscellaneous assets corresponding use-lives.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_1.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the Cost of Depreciation Based on List of Assets (For a Building Owner) — Depreciation_1","text":"Aaron Null","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the Cost of Depreciation Based on List of Assets (For a Building Owner) — Depreciation_1","text":"","code":"Depreciation_1(   Building_Remodeling = 900000,   Parking_Lot_Improvements = 50000,   Shelving_Check_Out_Counters = 60000,   Computer_Equipment_POS = 15000,   Vehicles = 12000,   Display_Cases = 15000,   Refrigeration = 20000,   Freezers = 20000,   Meat_Cutting_Equipment = 10000,   Miscellaneous_Assets_1 = 10000,   Miscellaneous_Assets_1_Use_Life = 10,   Miscellaneous_Assets_2 = 10000,   Miscellaneous_Assets_2_Use_Life = 10,   Miscellaneous_Assets_3 = 10000,   Miscellaneous_Assets_3_Use_Life = 10) #> [1] 43310.26"},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_2.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Cost of Depreciation Based on List of Assets (For a Renter) — Depreciation_2","title":"Calculates the Cost of Depreciation Based on List of Assets (For a Renter) — Depreciation_2","text":"function calculates estimated cost annual depreciation assets grocery stores (specifically scenario 2 building rented, owned).","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Cost of Depreciation Based on List of Assets (For a Renter) — Depreciation_2","text":"","code":"Depreciation_2(   Leasehold_Improvements,   Leasehold_Improvements_Use_Life,   Shelving_Check_Out_Counters,   Computer_Equipment_POS,   Vehicles,   Display_Cases,   Refrigeration,   Freezers,   Meat_Cutting_Equipment,   Miscellaneous_Assets_1,   Miscellaneous_Assets_1_Use_Life,   Miscellaneous_Assets_2,   Miscellaneous_Assets_2_Use_Life,   Miscellaneous_Assets_3,   Miscellaneous_Assets_3_Use_Life )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Cost of Depreciation Based on List of Assets (For a Renter) — Depreciation_2","text":"Leasehold_Improvements Cost various leasehold improvements. Leasehold_Improvements_Use_Life Use life lease lease term. Shelving_Check_Out_Counters Cost Shelving/Check Counters. Computer_Equipment_POS Cost Computer System/POS. Vehicles Cost Vehicles. Display_Cases Cost Display cases. Refrigeration Cost Refrigeration. Freezers Cost Freezers. Meat_Cutting_Equipment Cost Meat-cutting Equipment. Miscellaneous_Assets_1 (Optional) Cost Miscellaneous Asset (1) Miscellaneous_Assets_1_Use_Life (Optional) Use Life Miscellaneous Asset (1) Miscellaneous_Assets_2 (Optional) Cost Miscellaneous Asset (2) Miscellaneous_Assets_2_Use_Life (Optional) Use Life Miscellaneous Asset (2) Miscellaneous_Assets_3 (Optional) Cost Miscellaneous Asset (3) Miscellaneous_Assets_3_Use_Life (Optional) Use life Miscellaneous Asset (3)","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Cost of Depreciation Based on List of Assets (For a Renter) — Depreciation_2","text":"output returns estimated dollar amount lost annually asset depreciation hypothetical grocery store.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Cost of Depreciation Based on List of Assets (For a Renter) — Depreciation_2","text":"function based upon calculations originally formulated FFED ISU Extension Outreach. values various assets divided use life get annual loss depreciation asset. values added get total annual loss asset depreciation/amortization. Users can enter 3 miscellaneous assets corresponding use-lives.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the Cost of Depreciation Based on List of Assets (For a Renter) — Depreciation_2","text":"Aaron Null","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Depreciation_2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the Cost of Depreciation Based on List of Assets (For a Renter) — Depreciation_2","text":"","code":"Depreciation_1(   Building_Remodeling = 900000,   Parking_Lot_Improvements = 50000,   Shelving_Check_Out_Counters = 60000,   Computer_Equipment_POS = 15000,   Vehicles = 12000,   Display_Cases = 15000,   Refrigeration = 20000,   Freezers = 20000,   Meat_Cutting_Equipment = 10000,   Miscellaneous_Assets_1 = 10000,   Miscellaneous_Assets_1_Use_Life = 10,   Miscellaneous_Assets_2 = 10000,   Miscellaneous_Assets_2_Use_Life = 10,   Miscellaneous_Assets_3 = 10000,   Miscellaneous_Assets_3_Use_Life = 10) #> [1] 43310.26"},{"path":"https://dspg-2023.github.io/Grocery/reference/Distance_Euclidean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Euclidean Distance from an Origin point to End Points — Distance_Euclidean","title":"Calculates Euclidean Distance from an Origin point to End Points — Distance_Euclidean","text":"function calculates euclidean distance provided origin point provided end points. origin param parameters provided vector format.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Distance_Euclidean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Euclidean Distance from an Origin point to End Points — Distance_Euclidean","text":"","code":"Distance_Euclidean(df, origin, end)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Distance_Euclidean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Euclidean Distance from an Origin point to End Points — Distance_Euclidean","text":"df data frame containing latitude longitude points distance column binded . origin vector containing single latitude longitude point used origin point. end matrix latitude longitude points used end points.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Distance_Euclidean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Euclidean Distance from an Origin point to End Points — Distance_Euclidean","text":"function returns df_new, data frame distance calculations appended distance_vector column.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Distance_Euclidean.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates Euclidean Distance from an Origin point to End Points — Distance_Euclidean","text":"Harun Celik","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Employee_Wages.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Estimated Cost of Employee Wages for Grocery Stores — Employee_Wages","title":"Calculates the Estimated Cost of Employee Wages for Grocery Stores — Employee_Wages","text":"function calculates estimated cost employee wages hypothetical store user-selected location based user-selected percentage parameter. specified user, percentage defaults industry average provided Bizminer.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Employee_Wages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Estimated Cost of Employee Wages for Grocery Stores — Employee_Wages","text":"","code":"Employee_Wages(Total_Estimated_Revenue, Percentage = 0.0942)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Employee_Wages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Estimated Cost of Employee Wages for Grocery Stores — Employee_Wages","text":"Total_Estimated_Revenue Total estimated revenue based market size/location. Percentage Percentage total estimated revenue spent employee wages selected via user input (default Bizminer).","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Employee_Wages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Estimated Cost of Employee Wages for Grocery Stores — Employee_Wages","text":"output returns estimated dollar amount spent employee wages hypothetical grocery store given location.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Employee_Wages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Estimated Cost of Employee Wages for Grocery Stores — Employee_Wages","text":"function employs default percentage value financial analysis market research firm Bizminer based upon calculations originally formulated FFED ISU Extension Outreach.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Employee_Wages.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the Estimated Cost of Employee Wages for Grocery Stores — Employee_Wages","text":"Aaron Null","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Get_Census_Vars_ACS.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves Relevant Census Variables from American Community Survey (2021) — Get_Census_Vars_ACS","title":"Retrieves Relevant Census Variables from American Community Survey (2021) — Get_Census_Vars_ACS","text":"function retrieves variables related median household income, employment status languages spoken county American Community Survey (5-year average, 2021). variables used render plots tool.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Get_Census_Vars_ACS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves Relevant Census Variables from American Community Survey (2021) — Get_Census_Vars_ACS","text":"","code":"Get_Census_Vars_ACS(df_locations)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Get_Census_Vars_ACS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves Relevant Census Variables from American Community Survey (2021) — Get_Census_Vars_ACS","text":"df_locations Data frame cities, counties states within range circle buffer determined location nearest grocery stores. data frame inherited return DSPGrocery::Create_Circle_Buffer df_census_call.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Get_Census_Vars_ACS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves Relevant Census Variables from American Community Survey (2021) — Get_Census_Vars_ACS","text":"output returns data frame ACS5 variables median household income, employment status languages spoken county.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Get_Census_Vars_ACS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieves Relevant Census Variables from American Community Survey (2021) — Get_Census_Vars_ACS","text":"function receives data frame cities, counties states within circle buffer established market size spatial calculations outputs census data county.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Get_Census_Vars_ACS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieves Relevant Census Variables from American Community Survey (2021) — Get_Census_Vars_ACS","text":"Aaron Null","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Get_Census_Vars_Decennial.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves Relevant Census Variables from the US Decennial Census (2020) — Get_Census_Vars_Decennial","title":"Retrieves Relevant Census Variables from the US Decennial Census (2020) — Get_Census_Vars_Decennial","text":"function retrieves variables related race/ethnicity total population county U.S Decennial Census (2020). variables used render data table plot tool.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Get_Census_Vars_Decennial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves Relevant Census Variables from the US Decennial Census (2020) — Get_Census_Vars_Decennial","text":"","code":"Get_Census_Vars_Decennial(df_locations)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Get_Census_Vars_Decennial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves Relevant Census Variables from the US Decennial Census (2020) — Get_Census_Vars_Decennial","text":"df_locations Data frame cities, counties states within range circle buffer determined location nearest grocery stores. data frame inherited return DSPGrocery::Create_Circle_Buffer df_census_call.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Get_Census_Vars_Decennial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves Relevant Census Variables from the US Decennial Census (2020) — Get_Census_Vars_Decennial","text":"output returns data frame 2020 decennial census variables race/ethnicity total population county.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Get_Census_Vars_Decennial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieves Relevant Census Variables from the US Decennial Census (2020) — Get_Census_Vars_Decennial","text":"function receives data frame cities, counties states within circle buffer established market size spatial calculations outputs census data county.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Get_Census_Vars_Decennial.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieves Relevant Census Variables from the US Decennial Census (2020) — Get_Census_Vars_Decennial","text":"Aaron Null","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Gross_Margin.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Expected Gross Margin for Grocery Stores — Gross_Margin","title":"Calculates the Expected Gross Margin for Grocery Stores — Gross_Margin","text":"function calculates estimated portion total estimated revenue represented gross margin hypothetical grocery store user-selected location based user-selected percentage parameter. specified user, percentage defaults industry average provided Bizminer.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Gross_Margin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Expected Gross Margin for Grocery Stores — Gross_Margin","text":"","code":"Gross_Margin(Total_Estimated_Revenue, Percentage = 0.2446)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Gross_Margin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Expected Gross Margin for Grocery Stores — Gross_Margin","text":"Total_Estimated_Revenue Total estimated revenue based market size/location. Percentage Percentage total estimated revenue expected gross margin selected via user input (default Bizminer).","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Gross_Margin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Expected Gross Margin for Grocery Stores — Gross_Margin","text":"output returns estimated dollar amount gross margin hypothetical grocery store given location.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Gross_Margin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Expected Gross Margin for Grocery Stores — Gross_Margin","text":"function employs default percentage value financial analysis market research firm Bizminer based upon calculations originally formulated FFED ISU Extension Outreach.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Gross_Margin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the Expected Gross Margin for Grocery Stores — Gross_Margin","text":"Aaron Null","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Expense.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Annual Cost of Interest on a Loan — Interest_Expense","title":"Calculates the Annual Cost of Interest on a Loan — Interest_Expense","text":"function calculates annual cost interest loan. amount loan annual interest rate provided user.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Expense.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Annual Cost of Interest on a Loan — Interest_Expense","text":"","code":"Interest_Expense(Loan_Amount, Interest_Rate)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Expense.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Annual Cost of Interest on a Loan — Interest_Expense","text":"Loan_Amount Dollar amount user's loan. Interest_Rate annual interest rate loan.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Expense.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Annual Cost of Interest on a Loan — Interest_Expense","text":"output returns estimated dollar amount spent interest loan.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Expense.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Annual Cost of Interest on a Loan — Interest_Expense","text":"function calculates dollar amount spent interest loan multiplying loan annual interest rate (provided user).","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Expense.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the Annual Cost of Interest on a Loan — Interest_Expense","text":"Aaron Null","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Income.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Estimated Income from Interest-Bearing Assets for Grocery Stores — Interest_Income","title":"Calculates the Estimated Income from Interest-Bearing Assets for Grocery Stores — Interest_Income","text":"function calculates estimated income interest-bearing assets hypothetical store user-selected location based user-selected percentage parameter. specified user, percentage defaults industry average provided Bizminer.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Income.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Estimated Income from Interest-Bearing Assets for Grocery Stores — Interest_Income","text":"","code":"Interest_Income(Total_Estimated_Revenue, Percentage = 4e-04)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Income.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Estimated Income from Interest-Bearing Assets for Grocery Stores — Interest_Income","text":"Total_Estimated_Revenue Total estimated revenue based market size/location. Percentage Percentage total estimated revenue constitutes added income interest selected via user input (default Bizminer).","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Income.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Estimated Income from Interest-Bearing Assets for Grocery Stores — Interest_Income","text":"output returns estimated dollar amount earned income interest hypothetical grocery store given location.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Income.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Estimated Income from Interest-Bearing Assets for Grocery Stores — Interest_Income","text":"function employs default percentage value financial analysis market research firm Bizminer based upon calculations originally formulated FFED ISU Extension Outreach.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Interest_Income.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the Estimated Income from Interest-Bearing Assets for Grocery Stores — Interest_Income","text":"Aaron Null","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Officer_Compensation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Estimated Cost of Officer Compensation for Grocery Stores — Officer_Compensation","title":"Calculates the Estimated Cost of Officer Compensation for Grocery Stores — Officer_Compensation","text":"function calculates estimated cost officer compensation hypothetical store user-selected location based user-selected percentage parameter. specified user, percentage defaults industry average provided Bizminer.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Officer_Compensation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Estimated Cost of Officer Compensation for Grocery Stores — Officer_Compensation","text":"","code":"Officer_Compensation(Total_Estimated_Revenue, Percentage = 0.0118)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Officer_Compensation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Estimated Cost of Officer Compensation for Grocery Stores — Officer_Compensation","text":"Total_Estimated_Revenue Total estimated revenue based market size/location. Percentage Percentage total estimated revenue spent officer compensation selected via user input (default Bizminer).","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Officer_Compensation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Estimated Cost of Officer Compensation for Grocery Stores — Officer_Compensation","text":"output returns estimated dollar amount spent officer compensation hypothetical grocery store given location.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Officer_Compensation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Estimated Cost of Officer Compensation for Grocery Stores — Officer_Compensation","text":"function employs default percentage value financial analysis market research firm Bizminer based upon calculations originally formulated FFED ISU Extension Outreach.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Officer_Compensation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the Estimated Cost of Officer Compensation for Grocery Stores — Officer_Compensation","text":"Aaron Null","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Operating_Income_Loss.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation of Revenue Surplus after the Subtraction of Cost of Goods and other Operating\nCosts (Interim Result - Not Final) — Operating_Income_Loss","title":"Calculation of Revenue Surplus after the Subtraction of Cost of Goods and other Operating\nCosts (Interim Result - Not Final) — Operating_Income_Loss","text":"function calculates estimated revenue surplus subtracting cost goods, officer compensation, employee wages operating expenses outputs interim profit figure depreciation, interest income, interest expense secondary sources income taken account.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Operating_Income_Loss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation of Revenue Surplus after the Subtraction of Cost of Goods and other Operating\nCosts (Interim Result - Not Final) — Operating_Income_Loss","text":"","code":"Operating_Income_Loss(   Total_Estimated_Revenue,   Gross_Margin_Percentage = 0.2446 )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Operating_Income_Loss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation of Revenue Surplus after the Subtraction of Cost of Goods and other Operating\nCosts (Interim Result - Not Final) — Operating_Income_Loss","text":"Total_Estimated_Revenue Total estimated revenue based market size/location. Gross_Margin_Percentage User-selected gross margin percentage (default taken Bizminer).","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Operating_Income_Loss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation of Revenue Surplus after the Subtraction of Cost of Goods and other Operating\nCosts (Interim Result - Not Final) — Operating_Income_Loss","text":"output returns estimated revenue surplus (revenue left ) subtraction cost goods sold operating expenses (minus depreciation).","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Operating_Income_Loss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculation of Revenue Surplus after the Subtraction of Cost of Goods and other Operating\nCosts (Interim Result - Not Final) — Operating_Income_Loss","text":"function employs user-selected gross margin percentage argument calls functions \"Cost_of_Goods_Sold()\", \"Officer_Compensation()\", \"Employee_Wages()\" \"Other_Operating_Expense()\". function based upon calculations originally formulated FFED ISU Extension Outreach.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Operating_Income_Loss.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculation of Revenue Surplus after the Subtraction of Cost of Goods and other Operating\nCosts (Interim Result - Not Final) — Operating_Income_Loss","text":"Aaron Null","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Income.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Estimated Income from Miscellaneous Sources for Grocery Stores — Other_Income","title":"Calculates the Estimated Income from Miscellaneous Sources for Grocery Stores — Other_Income","text":"function calculates estimated income miscellaneous income sources hypothetical store user-selected location based user-selected percentage parameter. specified user, percentage defaults industry average provided Bizminer. examples miscellaneous sources income might include special grocery delivery services, curbside pickup discount club fees.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Income.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Estimated Income from Miscellaneous Sources for Grocery Stores — Other_Income","text":"","code":"Other_Income(Total_Estimated_Revenue, Percentage = 0.0115)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Income.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Estimated Income from Miscellaneous Sources for Grocery Stores — Other_Income","text":"Total_Estimated_Revenue Total estimated revenue based market size/location. Percentage Percentage total estimated revenue constitutes added income miscellaneous (\"\") income sources selected via user input (default Bizminer).","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Income.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Estimated Income from Miscellaneous Sources for Grocery Stores — Other_Income","text":"output returns estimated dollar amount earned income sources income hypothetical grocery store given location.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Income.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Estimated Income from Miscellaneous Sources for Grocery Stores — Other_Income","text":"function employs default percentage value financial analysis market research firm Bizminer based upon calculations originally formulated FFED ISU Extension Outreach.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Income.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the Estimated Income from Miscellaneous Sources for Grocery Stores — Other_Income","text":"Aaron Null","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Operating_Expense.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Estimated Cost of Miscellaneous Expenses for Grocery Stores — Other_Operating_Expense","title":"Calculates the Estimated Cost of Miscellaneous Expenses for Grocery Stores — Other_Operating_Expense","text":"function calculates estimated cost miscellaneous expenses hypothetical store user-selected location based user-selected percentage parameter. specified user, percentage defaults industry average provided Bizminer. expenses include tax, administrative repair costs, among others.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Operating_Expense.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Estimated Cost of Miscellaneous Expenses for Grocery Stores — Other_Operating_Expense","text":"","code":"Other_Operating_Expense(Total_Estimated_Revenue, Percentage = 0.1088)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Operating_Expense.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Estimated Cost of Miscellaneous Expenses for Grocery Stores — Other_Operating_Expense","text":"Total_Estimated_Revenue Total estimated revenue based market size/location. Percentage Percentage total estimated revenue spent miscellaneous (\"\") operating expenses selected via user input (default Bizminer).","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Operating_Expense.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Estimated Cost of Miscellaneous Expenses for Grocery Stores — Other_Operating_Expense","text":"output returns estimated dollar amount spent expenses hypothetical grocery store given location.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Operating_Expense.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Estimated Cost of Miscellaneous Expenses for Grocery Stores — Other_Operating_Expense","text":"function employs default percentage value financial analysis market research firm Bizminer based upon calculations originally formulated FFED ISU Extension Outreach.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Other_Operating_Expense.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the Estimated Cost of Miscellaneous Expenses for Grocery Stores — Other_Operating_Expense","text":"Aaron Null","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Pct_County.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation for a quarter circle. — Pct_County","title":"Calculation for a quarter circle. — Pct_County","text":"Calculation quarter circle.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Pct_County.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation for a quarter circle. — Pct_County","text":"","code":"Pct_County(north_quad, east_quad, south_quad, west_quad, county_size)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Pct_County.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation for a quarter circle. — Pct_County","text":"north_quad user defined size north quadrant east_quad user defined size east quadrant south_quad user defined size south quadrant west_quad user defined size west quadrant county_size User defined Size county","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Pct_County.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation for a quarter circle. — Pct_County","text":"outputs sum quadrant areas","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Primary_Shopper_Count.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Number of Primary Shoppers in Each Marker — Primary_Shopper_Count","title":"Calculates the Number of Primary Shoppers in Each Marker — Primary_Shopper_Count","text":"function calculates number primary shoppers given population market type.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Primary_Shopper_Count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Number of Primary Shoppers in Each Marker — Primary_Shopper_Count","text":"","code":"Primary_Shopper_Count(   pct_metro_prim = 50,   pct_rural_prim = 30,   pct_town_prim = 30,   metro_pop,   town_pop,   rural_pop )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Primary_Shopper_Count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Number of Primary Shoppers in Each Marker — Primary_Shopper_Count","text":"pct_metro_prim percentage primary shoppers metro market default taken 50% unless specified otherwise. pct_rural_prim percentage primary shoppers rural market default taken 30% unless specified otherwise. pct_town_prim percentage primary shoppers town market default taken 30% unless specified otherwise. metro_pop Population store location town_pop Population towns county rural_pop Population rural cities market","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Primary_Shopper_Count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Number of Primary Shoppers in Each Marker — Primary_Shopper_Count","text":"Outputs total number primary shoppers store","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Primary_Shopper_Count.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Number of Primary Shoppers in Each Marker — Primary_Shopper_Count","text":"function taken estimating Market Size.xlsx calculated step 6.","code":""},{"path":[]},{"path":"https://dspg-2023.github.io/Grocery/reference/Primary_Shopper_Count.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the Number of Primary Shoppers in Each Marker — Primary_Shopper_Count","text":"Srika Raja","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Primary_Shopper_Count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the Number of Primary Shoppers in Each Marker — Primary_Shopper_Count","text":"","code":"#Primary_Shopper_Count()"},{"path":"https://dspg-2023.github.io/Grocery/reference/Pull_Cities.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes a Vector of States and Retrieves All Cities in State(s) — Pull_Cities","title":"Takes a Vector of States and Retrieves All Cities in State(s) — Pull_Cities","text":"function takes list states passes loop pull cities provided states.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Pull_Cities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes a Vector of States and Retrieves All Cities in State(s) — Pull_Cities","text":"","code":"Pull_Cities(df_grocery_all, state_list)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Pull_Cities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes a Vector of States and Retrieves All Cities in State(s) — Pull_Cities","text":"df_grocery_all data frame containing store locations pulled googleway::google_places API. state_list list unique state values iterate .","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Pull_Cities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes a Vector of States and Retrieves All Cities in State(s) — Pull_Cities","text":"returns data frame cities state(s) called all_cities","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Pull_Cities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Takes a Vector of States and Retrieves All Cities in State(s) — Pull_Cities","text":"values list filtered using unique() avoid repetitive loops.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Pull_Cities.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Takes a Vector of States and Retrieves All Cities in State(s) — Pull_Cities","text":"Harun Celik","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Pull_Counties.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes a Vector of States and Retrieves All Counties in State(s) — Pull_Counties","title":"Takes a Vector of States and Retrieves All Counties in State(s) — Pull_Counties","text":"function takes list states passes loop pull counties provided states.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Pull_Counties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes a Vector of States and Retrieves All Counties in State(s) — Pull_Counties","text":"","code":"Pull_Counties(df_grocery_all, state_list)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Pull_Counties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes a Vector of States and Retrieves All Counties in State(s) — Pull_Counties","text":"df_grocery_all data frame containing store locations pulled googleway::google_places API. state_list list unique state values iterate .","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Pull_Counties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes a Vector of States and Retrieves All Counties in State(s) — Pull_Counties","text":"returns data frame counties state(s) called all_counties","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Pull_Counties.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Takes a Vector of States and Retrieves All Counties in State(s) — Pull_Counties","text":"values list filtered using unique() avoid repetitive loops.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Pull_Counties.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Takes a Vector of States and Retrieves All Counties in State(s) — Pull_Counties","text":"Harun Celik","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Quadrant_Area.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation for a quarter circle. — Quadrant_Area","title":"Calculation for a quarter circle. — Quadrant_Area","text":"Calculation quarter circle.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Quadrant_Area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation for a quarter circle. — Quadrant_Area","text":"","code":"Quadrant_Area(user_area)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Quadrant_Area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation for a quarter circle. — Quadrant_Area","text":"user_area user defined area circle","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Quadrant_Area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation for a quarter circle. — Quadrant_Area","text":"outputs output_area","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Quadrant_Area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation for a quarter circle. — Quadrant_Area","text":"","code":"Quadrant_Area(user_area = 4)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Quadrant_Calculator.html","id":null,"dir":"Reference","previous_headings":"","what":"Determines Distances to Stores in Quadrant Areas — Quadrant_Calculator","title":"Determines Distances to Stores in Quadrant Areas — Quadrant_Calculator","text":"Finds distance nearest store quadrant. return, just sets four global variables","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Quadrant_Calculator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determines Distances to Stores in Quadrant Areas — Quadrant_Calculator","text":"","code":"Quadrant_Calculator(df_grocery_only, df_geocode)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Quadrant_Calculator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determines Distances to Stores in Quadrant Areas — Quadrant_Calculator","text":"df_grocery_only data frame containing grocery store observations. Returned call googleway::google_places api. df_geocode data frame containing lat lng values geocoded address. geocode returned googleway::google_geocode.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Quadrant_Calculator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determines Distances to Stores in Quadrant Areas — Quadrant_Calculator","text":"function returns list four distances closest stores quadrant data frame 'df_circle_buffer' inherited DSPGrocery::Create_Circle_Buffer.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Quadrant_Calculator.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Determines Distances to Stores in Quadrant Areas — Quadrant_Calculator","text":"Alex Cory","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Rare_Shopper_Count.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Number of Rare Shoppers in Each Marker — Rare_Shopper_Count","title":"Calculates the Number of Rare Shoppers in Each Marker — Rare_Shopper_Count","text":"function calculates number rare shoppers given population market type.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Rare_Shopper_Count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Number of Rare Shoppers in Each Marker — Rare_Shopper_Count","text":"","code":"Rare_Shopper_Count(   pct_metro_rare = 10,   pct_rural_rare = 20,   pct_town_rare = 20,   metro_pop,   town_pop,   rural_pop )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Rare_Shopper_Count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Number of Rare Shoppers in Each Marker — Rare_Shopper_Count","text":"pct_metro_rare percentage secondary shoppers metro market default taken 10% unless specified otherwise. pct_rural_rare percentage secondary shoppers rural market default taken 20% unless specified otherwise. pct_town_rare percentage secondary shoppers town market default taken 20% unless specified otherwise. metro_pop Population store location town_pop Population towns county rural_pop Population rural cities market","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Rare_Shopper_Count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Number of Rare Shoppers in Each Marker — Rare_Shopper_Count","text":"Outputs total number Rare shoppers store","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Rare_Shopper_Count.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Number of Rare Shoppers in Each Marker — Rare_Shopper_Count","text":"function taken estimating Market Size.xlsx calculated step 6.","code":""},{"path":[]},{"path":"https://dspg-2023.github.io/Grocery/reference/Rare_Shopper_Count.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the Number of Rare Shoppers in Each Marker — Rare_Shopper_Count","text":"Srika Raja","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Rare_Shopper_Count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the Number of Rare Shoppers in Each Marker — Rare_Shopper_Count","text":"","code":"#Rare_Shopper_Count()"},{"path":"https://dspg-2023.github.io/Grocery/reference/Rural_Population.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation for a quarter circle. — Rural_Population","title":"Calculation for a quarter circle. — Rural_Population","text":"Calculation quarter circle.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Rural_Population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation for a quarter circle. — Rural_Population","text":"","code":"Rural_Population(county_pop, towns_pop, pct_county)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Rural_Population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation for a quarter circle. — Rural_Population","text":"county_pop population whole county towns_pop sum towns populations county pct_county percent county area","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Rural_Population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation for a quarter circle. — Rural_Population","text":"outputs rural population","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Rural_Shoppers_Count.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Count of Rare Shoppers for a Rural Market — Rural_Shoppers_Count","title":"Calculates Count of Rare Shoppers for a Rural Market — Rural_Shoppers_Count","text":"Calculates Count Rare Shoppers Rural Market","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Rural_Shoppers_Count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Count of Rare Shoppers for a Rural Market — Rural_Shoppers_Count","text":"","code":"Rural_Shoppers_Count(pct_primary = 30, pct_secondary = 50, pct_rare = 20)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Rural_Shoppers_Count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Count of Rare Shoppers for a Rural Market — Rural_Shoppers_Count","text":"pct_primary percentage county primary shopper defaulted 30%. pct_secondary percentage county secondary shopper defaulted 50%. pct_rare percentage county rare shopper defaulted 20%.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Rural_Shoppers_Count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Count of Rare Shoppers for a Rural Market — Rural_Shoppers_Count","text":"number shoppers rural shoppers based number primary, secondary, rare shoppers","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Secondary_Shopper_Count.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Number of Secondary Shoppers in Each Market — Secondary_Shopper_Count","title":"Calculates the Number of Secondary Shoppers in Each Market — Secondary_Shopper_Count","text":"function calculates number secondary shoppers given population market type.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Secondary_Shopper_Count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Number of Secondary Shoppers in Each Market — Secondary_Shopper_Count","text":"","code":"Secondary_Shopper_Count(   pct_metro_sec = 40,   pct_rural_sec = 50,   pct_town_sec = 50,   metro_pop,   town_pop,   rural_pop )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Secondary_Shopper_Count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Number of Secondary Shoppers in Each Market — Secondary_Shopper_Count","text":"pct_metro_sec percentage secondary shoppers metro market default taken 40% unless specified otherwise. pct_rural_sec percentage secondary shoppers rural market default taken 50% unless specified otherwise. pct_town_sec percentage secondary shoppers town market default taken 50% unless specified otherwise. metro_pop Population store location town_pop Population towns county rural_pop Population rural cities market","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Secondary_Shopper_Count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Number of Secondary Shoppers in Each Market — Secondary_Shopper_Count","text":"Outputs total number secondary shoppers store","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Secondary_Shopper_Count.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Number of Secondary Shoppers in Each Market — Secondary_Shopper_Count","text":"function taken estimating Market Size.xlsx calculated step 6.","code":""},{"path":[]},{"path":"https://dspg-2023.github.io/Grocery/reference/Secondary_Shopper_Count.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the Number of Secondary Shoppers in Each Market — Secondary_Shopper_Count","text":"Srika Raja","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Secondary_Shopper_Count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the Number of Secondary Shoppers in Each Market — Secondary_Shopper_Count","text":"","code":"#Secondary_Shopper_Count()"},{"path":"https://dspg-2023.github.io/Grocery/reference/State_Adj_Capita_Grocery_Spend.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase and State Index — State_Adj_Capita_Grocery_Spend","title":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase and State Index — State_Adj_Capita_Grocery_Spend","text":"function returns average per capita spending adjusting percentage price increase rural price parities base year(2022).","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/State_Adj_Capita_Grocery_Spend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase and State Index — State_Adj_Capita_Grocery_Spend","text":"","code":"State_Adj_Capita_Grocery_Spend(   state_index,   est_per_price_increase = 7,   grocery_sales = 8.11541e+11,   population = 334233854 )"},{"path":"https://dspg-2023.github.io/Grocery/reference/State_Adj_Capita_Grocery_Spend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase and State Index — State_Adj_Capita_Grocery_Spend","text":"state_index ratio current price basket price basket base year est_per_price_increase Estimated increase price grocery cumulative percent default taken 7 2023. grocery_sales Total US grocery sales annually. Default value 811541000000. population Total US population. Default value 334233854.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/State_Adj_Capita_Grocery_Spend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase and State Index — State_Adj_Capita_Grocery_Spend","text":"Outputs average per capita grocery spend adjusting expected price increase state index","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/State_Adj_Capita_Grocery_Spend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase and State Index — State_Adj_Capita_Grocery_Spend","text":"function taken Estimating_Revenue.xlsx calculated Step three. function calls Adj_Capita_Grocery_Spend().","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/State_Adj_Capita_Grocery_Spend.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase and State Index — State_Adj_Capita_Grocery_Spend","text":"Srika Raja","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/State_Adj_Capita_Grocery_Spend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates Average per Capita Spending Adjusted by Estimated Price Increase and State Index — State_Adj_Capita_Grocery_Spend","text":"","code":"State_Adj_Capita_Grocery_Spend(99,7) #> [1] 2572"},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Estimate_Revenue.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Estimated Total Revenue — Total_Estimate_Revenue","title":"Calculates the Estimated Total Revenue — Total_Estimate_Revenue","text":"function returns total estimated revenue calculated taking sum money spent primary secondary tertiary shoppers.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Estimate_Revenue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Estimated Total Revenue — Total_Estimate_Revenue","text":"","code":"Total_Estimate_Revenue(   per_of_grocery_spend_rare = 5,   per_of_grocery_spend_sec = 25,   per_of_grocery_spend_prim = 60,   pct_metro_prim = 50,   pct_rural_prim = 30,   pct_town_prim = 30,   pct_metro_sec = 40,   pct_rural_sec = 50,   pct_town_sec = 50,   pct_metro_rare = 10,   pct_rural_rare = 20,   pct_town_rare = 20,   metro_pop,   town_pop,   rural_pop,   state_index,   est_per_price_increase = 7,   grocery_sales = 8.11541e+11,   population = 334233854 )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Estimate_Revenue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Estimated Total Revenue — Total_Estimate_Revenue","text":"per_of_grocery_spend_rare percentage groceries rare shoppers spend proposed store per_of_grocery_spend_sec percentage groceries secondary shoppers spend proposed store per_of_grocery_spend_prim percentage groceries primary shopper spend proposed store pct_metro_prim percentage primary shoppers metro market default taken 50% unless specified otherwise. pct_rural_prim percentage primary shoppers rural market default taken 30% unless specified otherwise. pct_town_prim percentage primary shoppers town market default taken 30% unless specified otherwise. pct_metro_sec percentage secondary shoppers metro market default taken 40% unless specified otherwise. pct_rural_sec percentage secondary shoppers rural market default taken 50% unless specified otherwise. pct_town_sec percentage secondary shoppers town market default taken 50% unless specified otherwise. pct_metro_rare percentage rare shoppers metro market default taken 10% unless specified otherwise. pct_rural_rare percentage rare shoppers rural market default taken 20% unless specified otherwise. pct_town_rare percentage rare shoppers town market default taken 20% unless specified otherwise. metro_pop Population store location town_pop Population towns county rural_pop Population rural cities market state_index ratio current price basket price basket base year est_per_price_increase Estimated increase price grocery cumulative percent default taken 7 2023. grocery_sales Total US grocery sales annually. Default value 811541000000. population Total US population. Default value 334233854.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Estimate_Revenue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Estimated Total Revenue — Total_Estimate_Revenue","text":"Outputs estimated total revenue proposed store.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Estimate_Revenue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Estimated Total Revenue — Total_Estimate_Revenue","text":"function taken estimating Revenue.xlsx calculated step 4. function calls Total_Spend_Primary_Shoppers(), Total_Spend_Secondary_Shoppers() Total_Spend_Rare_Shoppers()","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Estimate_Revenue.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the Estimated Total Revenue — Total_Estimate_Revenue","text":"Srika Raja","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Estimate_Revenue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the Estimated Total Revenue — Total_Estimate_Revenue","text":"","code":"#Total_Estimate_Revenue(state_index=99)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Primary_Shoppers.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Money Spent by Primary Shoppers — Total_Spend_Primary_Shoppers","title":"Calculates the Money Spent by Primary Shoppers — Total_Spend_Primary_Shoppers","text":"function return total money spent primary shoppers visiting store.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Primary_Shoppers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Money Spent by Primary Shoppers — Total_Spend_Primary_Shoppers","text":"","code":"Total_Spend_Primary_Shoppers(   per_of_grocery_spend_prim = 60,   pct_metro_prim = 50,   pct_rural_prim = 30,   pct_town_prim = 30,   metro_pop,   town_pop,   rural_pop,   state_index,   est_per_price_increase = 7,   grocery_sales = 8.11541e+11,   population = 334233854 )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Primary_Shoppers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Money Spent by Primary Shoppers — Total_Spend_Primary_Shoppers","text":"per_of_grocery_spend_prim percentage groceries primary shopper spend proposed store pct_metro_prim percentage primary shoppers metro market default taken 50% unless specified otherwise. pct_rural_prim percentage primary shoppers rural market default taken 30% unless specified otherwise. pct_town_prim percentage primary shoppers town market default taken 30% unless specified otherwise. metro_pop Population store location town_pop Population towns county rural_pop Population rural cities market state_index ratio current price basket price basket base year est_per_price_increase Estimated increase price grocery cumulative percent default taken 7 2023. grocery_sales Total US grocery sales annually. Default value 811541000000. population Total US population. Default value 334233854.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Primary_Shoppers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Money Spent by Primary Shoppers — Total_Spend_Primary_Shoppers","text":"Outputs total spending primary shoppers proposed store","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Primary_Shoppers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Money Spent by Primary Shoppers — Total_Spend_Primary_Shoppers","text":"function taken estimating Revenue.xlsx calculated step 4. function calls State_Adj_Capita_Grocery_Spend() Primary_Shopper_Count()","code":""},{"path":[]},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Primary_Shoppers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the Money Spent by Primary Shoppers — Total_Spend_Primary_Shoppers","text":"Srika Raja","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Primary_Shoppers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the Money Spent by Primary Shoppers — Total_Spend_Primary_Shoppers","text":"","code":"#Total_Spend_Primary_Shoppers(state_index=99)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Rare_Shoppers.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Money Spent by Rare Shoppers — Total_Spend_Rare_Shoppers","title":"Calculates the Money Spent by Rare Shoppers — Total_Spend_Rare_Shoppers","text":"function returns total money spent rare shoppers visiting store.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Rare_Shoppers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Money Spent by Rare Shoppers — Total_Spend_Rare_Shoppers","text":"","code":"Total_Spend_Rare_Shoppers(   per_of_grocery_spend_rare = 5,   pct_metro_rare = 10,   pct_rural_rare = 20,   pct_town_rare = 20,   metro_pop,   town_pop,   rural_pop,   state_index,   est_per_price_increase = 7,   grocery_sales = 8.11541e+11,   population = 334233854 )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Rare_Shoppers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Money Spent by Rare Shoppers — Total_Spend_Rare_Shoppers","text":"per_of_grocery_spend_rare percentage groceries rare shoppers spend proposed store pct_metro_rare percentage rare shoppers metro market default taken 10% unless specified otherwise. pct_rural_rare percentage rare shoppers rural market default taken 20% unless specified otherwise. pct_town_rare percentage rare shoppers town market default taken 20% unless specified otherwise. metro_pop Population store location town_pop Population towns county rural_pop Population rural cities market state_index ratio current price basket price basket base year. est_per_price_increase Estimated increase price grocery cumulative percent default taken 7 2023. grocery_sales Total US grocery sales annually. Default value 811541000000. population Total US population. Default value 334233854.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Rare_Shoppers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Money Spent by Rare Shoppers — Total_Spend_Rare_Shoppers","text":"Outputs total spending Rare Shoppers proposed store.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Rare_Shoppers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Money Spent by Rare Shoppers — Total_Spend_Rare_Shoppers","text":"function taken estimating Revenue.xlsx calculated step 4. function calls State_Adj_Capita_Grocery_Spend() Rare_Shopper_Count()","code":""},{"path":[]},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Rare_Shoppers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the Money Spent by Rare Shoppers — Total_Spend_Rare_Shoppers","text":"Srika Raja","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Rare_Shoppers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the Money Spent by Rare Shoppers — Total_Spend_Rare_Shoppers","text":"","code":"#Total_Spend_Rare_Shoppers(state_index=99)"},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Secondary_Shoppers.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Money Spent by Secondary Shoppers — Total_Spend_Secondary_Shoppers","title":"Calculates the Money Spent by Secondary Shoppers — Total_Spend_Secondary_Shoppers","text":"function returns total money spent secondary shoppers visiting store.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Secondary_Shoppers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Money Spent by Secondary Shoppers — Total_Spend_Secondary_Shoppers","text":"","code":"Total_Spend_Secondary_Shoppers(   per_of_grocery_spend_sec = 25,   pct_metro_sec = 40,   pct_rural_sec = 50,   pct_town_sec = 50,   metro_pop,   town_pop,   rural_pop,   state_index,   est_per_price_increase = 7,   grocery_sales = 8.11541e+11,   population = 334233854 )"},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Secondary_Shoppers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Money Spent by Secondary Shoppers — Total_Spend_Secondary_Shoppers","text":"per_of_grocery_spend_sec percentage groceries secondary shoppers spend proposed store pct_metro_sec percentage secondary shoppers metro market default taken 40% unless specified otherwise. pct_rural_sec percentage secondary shoppers rural market default taken 50% unless specified otherwise. pct_town_sec percentage secondary shoppers town market default taken 50% unless specified otherwise. metro_pop Population store location town_pop Population towns county rural_pop Population rural cities market state_index ratio current price basket price basket base year est_per_price_increase Estimated increase price grocery cumulative percent default taken 7 2023. grocery_sales Total US grocery sales annually. Default value 811541000000. population Total US population. Default value 334233854.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Secondary_Shoppers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Money Spent by Secondary Shoppers — Total_Spend_Secondary_Shoppers","text":"Outputs total spending secondary shoppers proposed store","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Secondary_Shoppers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the Money Spent by Secondary Shoppers — Total_Spend_Secondary_Shoppers","text":"function taken estimating Revenue.xlsx calculated step 4. function calls State_Adj_Capita_Grocery_Spend() Secondary_Shopper_Count()","code":""},{"path":[]},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Secondary_Shoppers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculates the Money Spent by Secondary Shoppers — Total_Spend_Secondary_Shoppers","text":"Srika Raja","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/Total_Spend_Secondary_Shoppers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the Money Spent by Secondary Shoppers — Total_Spend_Secondary_Shoppers","text":"","code":"#Total_Spend_Secondary_Shoppers(state_index=99)"},{"path":"https://dspg-2023.github.io/Grocery/reference/UTM_Zoner.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates UTM Zones Based on Longitude Values — UTM_Zoner","title":"Creates UTM Zones Based on Longitude Values — UTM_Zoner","text":"Allows user enter longitude return UTM zone. use ever, implementing terrible.","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/UTM_Zoner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates UTM Zones Based on Longitude Values — UTM_Zoner","text":"","code":"UTM_Zoner(lng)"},{"path":"https://dspg-2023.github.io/Grocery/reference/UTM_Zoner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates UTM Zones Based on Longitude Values — UTM_Zoner","text":"lng longitude","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/UTM_Zoner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates UTM Zones Based on Longitude Values — UTM_Zoner","text":"zone UTM zone","code":""},{"path":"https://dspg-2023.github.io/Grocery/reference/UTM_Zoner.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates UTM Zones Based on Longitude Values — UTM_Zoner","text":"Alex Cory","code":""}]
